{
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\\\\authorsTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\authorsTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\authorsTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\authorsTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
        "sourceFileName": "authorsTest.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst expect = chai.expect;\n\nconst request = require(\"supertest\");\n\nlet Author = require(\"../../../models/authors\");\n\nconst _ = require(\"lodash\");\n\nlet server = require(\"../../../bin/www\");\n\nlet validID;\ndescribe(\"Authors\", () => {\n  beforeEach(async () => {\n    try {\n      await Author.deleteMany({});\n      let author = new Author();\n      author.name = \"Yeats\";\n      author.introduction = \"Irish poet and one of the foremost figures of 20th-century literature. \" + \"A pillar of the Irish literary establishment, he helped to found the Abbey Theatre, \" + \"and in his later years served two terms as a Senator of the Irish Free State.\";\n      await author.save();\n      author = new Author();\n      author.name = \"Du Fu\";\n      author.introduction = \"Du Fu was a prominent Chinese poet of the Tang dynasty.\";\n      await author.save();\n      author = await Author.findOne({\n        name: \"Yeats\"\n      });\n      validID = author._id;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  describe(\"GET /authors\", () => {\n    it(\"should return all the authors\", done => {\n      request(server).get(\"/authors\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n        try {\n          expect(res.body).to.be.a(\"array\");\n          expect(res.body.length).to.equal(2);\n\n          let result = _.map(res.body, author => {\n            return {\n              name: author.name\n            };\n          });\n\n          expect(result).to.deep.include({\n            name: \"Yeats\"\n          });\n          expect(result).to.deep.include({\n            name: \"Du Fu\"\n          });\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });\n  });\n  describe(\"GET /authors/:id\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return the matching author\", done => {\n        request(server).get(`/authors/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body[0]).to.have.property(\"name\", \"Yeats\");\n          done(err);\n        });\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return the NOT found message\", done => {\n        request(server).get(\"/authors/9999\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body.message).equals(\"Author NOT Found!\");\n          done(err);\n        });\n      });\n    });\n  });\n  describe(\"POST /authors\", () => {\n    it(\"should return confirmation message and update datastore\", () => {\n      const author = {\n        name: \"Shakespeare\",\n        introduction: \"Great Great English play writer and poet\"\n      };\n      return request(server).post(\"/authors\").send(author).expect(200).then(res => {\n        expect(res.body.message).equals(\"Author Successfully Added!\");\n        validID = res.body.data._id;\n      });\n    });\n    after(() => {\n      return request(server).get(`/authors/${validID}`).expect(200).then(res => {\n        expect(res.body[0]).to.have.property(\"name\", \"Shakespeare\");\n        expect(res.body[0]).to.have.property(\"introduction\", \"Great Great English play writer and poet\");\n      });\n    });\n  });\n  describe(\"PUT /authors/:id/deleteWork\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return a message and the author work is added\", () => {\n        const poemId = {\n          poemId: \"5dc14e4fb7ee92384c501889\"\n        };\n        return request(server).put(`/authors/${validID}/deleteWork`).send(poemId).expect(200).then(resp => {\n          expect(resp.body).to.include({\n            message: \"Work Successfully deleted!\"\n          });\n        });\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return information is wrong\", () => {\n        const poemId = {\n          poemId: \"5dc14e4fb7ee92384c501889\"\n        };\n        return request(server).put(\"/authors/34343/deleteWork\").send(poemId).expect(200).then(res => {\n          expect(res.body.message).equals(\"Author NOT Found!\");\n        });\n      });\n    });\n  });\n  describe(\"PUT /authors/:id/works\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return a message and the author work is added\", () => {\n        const poemId = {\n          poemId: \"5dc14e4fb7ee92384c501889\"\n        };\n        return request(server).put(`/authors/${validID}/works`).send(poemId).expect(200).then(resp => {\n          expect(resp.body).to.include({\n            message: \"Work Successfully Added!\"\n          });\n          expect(resp.body.data.works[0]).equals(\"5dc14e4fb7ee92384c501889\");\n        });\n      });\n      after(() => {\n        return request(server).get(`/authors/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).then(resp => {\n          expect(resp.body[0].works[0]).equals(\"5dc14e4fb7ee92384c501889\");\n        });\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return information is wrong\", () => {\n        const poemId = {\n          poemId: \"5dc14e4fb7ee92384c501889\"\n        };\n        return request(server).put(\"/authors/34343/works\").send(poemId).expect(200).then(res => {\n          expect(res.body.message).equals(\"Author NOT Found!\");\n        });\n      });\n    });\n  });\n  /*describe.only(\"PUT /authors/:id/like\", () => {\r\n      describe(\"when the id is valid\", () => {\r\n          it(\"should return a message and the author is liked\", () => {\r\n              const userCredentials = {\r\n                  email: 'LovYeats@lala.com',\r\n                  password: 'trytry123'\r\n              }\r\n              var authenticatedUser = request.agent(app);\r\n              before(function(done){\r\n                  authenticatedUser\r\n                      .post('/users/login')\r\n                      .send(userCredentials)\r\n                      .end(function(err, response){\r\n                          expect(response.statusCode).to.equal(200);\r\n                          done();\r\n                      });\r\n              });\r\n              authenticatedUser.put(`/authors/${validID}/like`)\r\n                  .expect(200)\r\n                  .then(resp => {\r\n                      expect(resp.body).to.include({message: \"Author Successfully Liked!\"});\r\n                  });\r\n          });\r\n          after(() => {\r\n              return request(server)\r\n                  .get(`/authors/${validID}`)\r\n                  .set(\"Accept\", \"application/json\")\r\n                  .expect(\"Content-Type\", /json/)\r\n                  .expect(200)\r\n                  .then(resp => {\r\n                      expect(resp.body[0].works[0]).equals(\"5dc14e4fb7ee92384c501889\");\r\n                  });\r\n          });\r\n      });*/\n\n  /*describe(\"when the id is invalid\", () => {\r\n          it(\"should return information is wrong\", () => {\r\n              const poemId = {poemId: \"5dc14e4fb7ee92384c501889\"};\r\n              return request(server)\r\n                  .put(`/authors/34343/works`)\r\n                  .send(poemId)\r\n                  .expect(200)\r\n                  .then(res => {\r\n                      expect(res.body.message).equals(\"Author NOT Found!\");\r\n                  });\r\n          });\r\n      });\r\n  });*/\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhvcnNUZXN0LmpzIl0sIm5hbWVzIjpbImNoYWkiLCJyZXF1aXJlIiwiZXhwZWN0IiwicmVxdWVzdCIsIkF1dGhvciIsIl8iLCJzZXJ2ZXIiLCJ2YWxpZElEIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiZGVsZXRlTWFueSIsImF1dGhvciIsIm5hbWUiLCJpbnRyb2R1Y3Rpb24iLCJzYXZlIiwiZmluZE9uZSIsIl9pZCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsIml0IiwiZG9uZSIsImdldCIsInNldCIsImVuZCIsImVyciIsInJlcyIsImJvZHkiLCJ0byIsImJlIiwiYSIsImxlbmd0aCIsImVxdWFsIiwicmVzdWx0IiwibWFwIiwiZGVlcCIsImluY2x1ZGUiLCJlIiwiaGF2ZSIsInByb3BlcnR5IiwibWVzc2FnZSIsImVxdWFscyIsInBvc3QiLCJzZW5kIiwidGhlbiIsImRhdGEiLCJhZnRlciIsInBvZW1JZCIsInB1dCIsInJlc3AiLCJ3b3JrcyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLElBQUksQ0FBQ0UsTUFBcEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRixPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxJQUFJRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyx5QkFBRCxDQUFwQjs7QUFFQSxNQUFNSSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUNBLElBQUlLLE1BQU0sR0FBR0wsT0FBTyxDQUFDLGtCQUFELENBQXBCOztBQUNBLElBQUlNLE9BQUo7QUFFQUMsUUFBUSxDQUFDLFNBQUQsRUFBWSxNQUFNO0FBQ3RCQyxFQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNuQixRQUFJO0FBQ0EsWUFBTUwsTUFBTSxDQUFDTSxVQUFQLENBQWtCLEVBQWxCLENBQU47QUFDQSxVQUFJQyxNQUFNLEdBQUcsSUFBSVAsTUFBSixFQUFiO0FBQ0FP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QUdGN0MsTUFIRSxDQUdLLEdBSEwsRUFJRjBDLElBSkUsQ0FJR2xCLEdBQUcsSUFBSTtBQUNUeEIsVUFBQUEsTUFBTSxDQUFDd0IsR0FBRyxDQUFDQyxJQUFKLENBQVNhLE9BQVYsQ0FBTixDQUF5QkMsTUFBekIsQ0FBZ0MsbUJBQWhDO0FBQ0gsU0FORSxDQUFQO0FBT0gsT0FUQyxDQUFGO0FBVUgsS0FYTyxDQUFSO0FBWUgsR0FwQ08sQ0FBUjtBQXNDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQ0E7Ozs7Ozs7Ozs7Ozs7QUFhSCxDQXBOTyxDQUFSIiwic291cmNlUm9vdCI6IkQ6XFxXZWJzdG9ybVxccG9ldHJ5V2ViXFx0ZXN0XFxmdW5jdGlvbmFsXFxhcGkiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjaGFpID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmNvbnN0IGV4cGVjdCA9IGNoYWkuZXhwZWN0O1xyXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZShcInN1cGVydGVzdFwiKTtcclxubGV0IEF1dGhvciA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tb2RlbHMvYXV0aG9yc1wiKTtcclxuXHJcbmNvbnN0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5sZXQgc2VydmVyID0gcmVxdWlyZShcIi4uLy4uLy4uL2Jpbi93d3dcIik7XHJcbmxldCB2YWxpZElEO1xyXG5cclxuZGVzY3JpYmUoXCJBdXRob3JzXCIsICgpID0+IHtcclxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IEF1dGhvci5kZWxldGVNYW55KHt9KTtcclxuICAgICAgICAgICAgbGV0IGF1dGhvciA9IG5ldyBBdXRob3IoKTtcclxuICAgICAgICAgICAgYXV0aG9yLm5hbWUgPSBcIlllYXRzXCI7XHJcbiAgICAgICAgICAgIGF1dGhvci5pbnRyb2R1Y3Rpb24gPSBcIklyaXNoIHBvZXQgYW5kIG9uZSBvZiB0aGUgZm9yZW1vc3QgZmlndXJlcyBvZiAyMHRoLWNlbnR1cnkgbGl0ZXJhdHVyZS4gXCIgK1xyXG4gICAgICAgICAgICBcIkEgcGlsbGFyIG9mIHRoZSBJcmlzaCBsaXRlcmFyeSBlc3RhYmxpc2htZW50LCBoZSBoZWxwZWQgdG8gZm91bmQgdGhlIEFiYmV5IFRoZWF0cmUsIFwiICtcclxuICAgICAgICAgICAgXCJhbmQgaW4gaGlzIGxhdGVyIHllYXJzIHNlcnZlZCB0d28gdGVybXMgYXMgYSBTZW5hdG9yIG9mIHRoZSBJcmlzaCBGcmVlIFN0YXRlLlwiO1xyXG4gICAgICAgICAgICBhd2FpdCBhdXRob3Iuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgYXV0aG9yID0gbmV3IEF1dGhvcigpO1xyXG4gICAgICAgICAgICBhdXRob3IubmFtZSA9IFwiRHUgRnVcIjtcclxuICAgICAgICAgICAgYXV0aG9yLmludHJvZHVjdGlvbiA9IFwiRHUgRnUgd2FzIGEgcHJvbWluZW50IENoaW5lc2UgcG9ldCBvZiB0aGUgVGFuZyBkeW5hc3R5LlwiO1xyXG4gICAgICAgICAgICBhd2FpdCBhdXRob3Iuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgYXV0aG9yID0gYXdhaXQgQXV0aG9yLmZpbmRPbmUoeyBuYW1lOlwiWWVhdHNcIiB9KTtcclxuICAgICAgICAgICAgdmFsaWRJRCA9IGF1dGhvci5faWQ7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZShcIkdFVCAvYXV0aG9yc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGFsbCB0aGUgYXV0aG9yc1wiLCBkb25lID0+IHtcclxuICAgICAgICAgICAgcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAuZ2V0KFwiL2F1dGhvcnNcIilcclxuICAgICAgICAgICAgICAgIC5zZXQoXCJBY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpXHJcbiAgICAgICAgICAgICAgICAuZXhwZWN0KFwiQ29udGVudC1UeXBlXCIsIC9qc29uLylcclxuICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgICAgICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keSkudG8uYmUuYShcImFycmF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkubGVuZ3RoKS50by5lcXVhbCgyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IF8ubWFwKHJlcy5ib2R5LCBhdXRob3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogYXV0aG9yLm5hbWV9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZGVlcC5pbmNsdWRlKHsgbmFtZTogXCJZZWF0c1wiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzdWx0KS50by5kZWVwLmluY2x1ZGUoeyBuYW1lOiBcIkR1IEZ1XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZShcIkdFVCAvYXV0aG9ycy86aWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgaWQgaXMgdmFsaWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gdGhlIG1hdGNoaW5nIGF1dGhvclwiLCBkb25lID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYC9hdXRob3JzLyR7dmFsaWRJRH1gKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoXCJBY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdChcIkNvbnRlbnQtVHlwZVwiLCAvanNvbi8pXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5WzBdKS50by5oYXZlLnByb3BlcnR5KFwibmFtZVwiLFwiWWVhdHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBpZCBpcyBpbnZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBOT1QgZm91bmQgbWVzc2FnZVwiLCBkb25lID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoXCIvYXV0aG9ycy85OTk5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KFwiQ29udGVudC1UeXBlXCIsIC9qc29uLylcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkubWVzc2FnZSkuZXF1YWxzKFwiQXV0aG9yIE5PVCBGb3VuZCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKFwiUE9TVCAvYXV0aG9yc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGNvbmZpcm1hdGlvbiBtZXNzYWdlIGFuZCB1cGRhdGUgZGF0YXN0b3JlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYXV0aG9yID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTpcIlNoYWtlc3BlYXJlXCIsXHJcbiAgICAgICAgICAgICAgICBpbnRyb2R1Y3Rpb246XCJHcmVhdCBHcmVhdCBFbmdsaXNoIHBsYXkgd3JpdGVyIGFuZCBwb2V0XCJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgLnBvc3QoXCIvYXV0aG9yc1wiKVxyXG4gICAgICAgICAgICAgICAgLnNlbmQoYXV0aG9yKVxyXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5tZXNzYWdlKS5lcXVhbHMoXCJBdXRob3IgU3VjY2Vzc2Z1bGx5IEFkZGVkIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZElEID0gcmVzLmJvZHkuZGF0YS5faWQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhZnRlcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgIC5nZXQoYC9hdXRob3JzLyR7dmFsaWRJRH1gKVxyXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keVswXSkudG8uaGF2ZS5wcm9wZXJ0eShcIm5hbWVcIiwgXCJTaGFrZXNwZWFyZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHlbMF0pLnRvLmhhdmUucHJvcGVydHkoXCJpbnRyb2R1Y3Rpb25cIixcIkdyZWF0IEdyZWF0IEVuZ2xpc2ggcGxheSB3cml0ZXIgYW5kIHBvZXRcIik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpYmUoXCJQVVQgL2F1dGhvcnMvOmlkL2RlbGV0ZVdvcmtcIiwgKCkgPT4ge1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgaWQgaXMgdmFsaWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gYSBtZXNzYWdlIGFuZCB0aGUgYXV0aG9yIHdvcmsgaXMgYWRkZWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9lbUlkID0ge3BvZW1JZDogXCI1ZGMxNGU0ZmI3ZWU5MjM4NGM1MDE4ODlcIn07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnB1dChgL2F1dGhvcnMvJHt2YWxpZElEfS9kZWxldGVXb3JrYClcclxuICAgICAgICAgICAgICAgICAgICAuc2VuZChwb2VtSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXNwLmJvZHkpLnRvLmluY2x1ZGUoe21lc3NhZ2U6IFwiV29yayBTdWNjZXNzZnVsbHkgZGVsZXRlZCFcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBkZXNjcmliZShcIndoZW4gdGhlIGlkIGlzIGludmFsaWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gaW5mb3JtYXRpb24gaXMgd3JvbmdcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9lbUlkID0ge3BvZW1JZDogXCI1ZGMxNGU0ZmI3ZWU5MjM4NGM1MDE4ODlcIn07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnB1dChcIi9hdXRob3JzLzM0MzQzL2RlbGV0ZVdvcmtcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2VuZChwb2VtSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLmVxdWFscyhcIkF1dGhvciBOT1QgRm91bmQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpYmUoXCJQVVQgL2F1dGhvcnMvOmlkL3dvcmtzXCIsICgpID0+IHtcclxuICAgICAgICBkZXNjcmliZShcIndoZW4gdGhlIGlkIGlzIHZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGEgbWVzc2FnZSBhbmQgdGhlIGF1dGhvciB3b3JrIGlzIGFkZGVkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvZW1JZCA9IHtwb2VtSWQ6IFwiNWRjMTRlNGZiN2VlOTIzODRjNTAxODg5XCJ9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wdXQoYC9hdXRob3JzLyR7dmFsaWRJRH0vd29ya3NgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHBvZW1JZClcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlc3AuYm9keSkudG8uaW5jbHVkZSh7bWVzc2FnZTogXCJXb3JrIFN1Y2Nlc3NmdWxseSBBZGRlZCFcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzcC5ib2R5LmRhdGEud29ya3NbMF0pLmVxdWFscyhcIjVkYzE0ZTRmYjdlZTkyMzg0YzUwMTg4OVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFmdGVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAvYXV0aG9ycy8ke3ZhbGlkSUR9YClcclxuICAgICAgICAgICAgICAgICAgICAuc2V0KFwiQWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoXCJDb250ZW50LVR5cGVcIiwgL2pzb24vKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzcC5ib2R5WzBdLndvcmtzWzBdKS5lcXVhbHMoXCI1ZGMxNGU0ZmI3ZWU5MjM4NGM1MDE4ODlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgaWQgaXMgaW52YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHJldHVybiBpbmZvcm1hdGlvbiBpcyB3cm9uZ1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb2VtSWQgPSB7cG9lbUlkOiBcIjVkYzE0ZTRmYjdlZTkyMzg0YzUwMTg4OVwifTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAucHV0KFwiL2F1dGhvcnMvMzQzNDMvd29ya3NcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2VuZChwb2VtSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLmVxdWFscyhcIkF1dGhvciBOT1QgRm91bmQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qZGVzY3JpYmUub25seShcIlBVVCAvYXV0aG9ycy86aWQvbGlrZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBpZCBpcyB2YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHJldHVybiBhIG1lc3NhZ2UgYW5kIHRoZSBhdXRob3IgaXMgbGlrZWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXNlckNyZWRlbnRpYWxzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiAnTG92WWVhdHNAbGFsYS5jb20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAndHJ5dHJ5MTIzJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGF1dGhlbnRpY2F0ZWRVc2VyID0gcmVxdWVzdC5hZ2VudChhcHApO1xyXG4gICAgICAgICAgICAgICAgYmVmb3JlKGZ1bmN0aW9uKGRvbmUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWRVc2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3N0KCcvdXNlcnMvbG9naW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2VuZCh1c2VyQ3JlZGVudGlhbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZWRVc2VyLnB1dChgL2F1dGhvcnMvJHt2YWxpZElEfS9saWtlYClcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlc3AuYm9keSkudG8uaW5jbHVkZSh7bWVzc2FnZTogXCJBdXRob3IgU3VjY2Vzc2Z1bGx5IExpa2VkIVwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhZnRlcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldChgL2F1dGhvcnMvJHt2YWxpZElEfWApXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KFwiQ29udGVudC1UeXBlXCIsIC9qc29uLylcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlc3AuYm9keVswXS53b3Jrc1swXSkuZXF1YWxzKFwiNWRjMTRlNGZiN2VlOTIzODRjNTAxODg5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsqL1xyXG4gICAgLypkZXNjcmliZShcIndoZW4gdGhlIGlkIGlzIGludmFsaWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gaW5mb3JtYXRpb24gaXMgd3JvbmdcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9lbUlkID0ge3BvZW1JZDogXCI1ZGMxNGU0ZmI3ZWU5MjM4NGM1MDE4ODlcIn07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnB1dChgL2F1dGhvcnMvMzQzNDMvd29ya3NgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHBvZW1JZClcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkubWVzc2FnZSkuZXF1YWxzKFwiQXV0aG9yIE5PVCBGb3VuZCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7Ki9cclxufSk7XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "authorsTest.js"
      ],
      "names": [
        "chai",
        "require",
        "expect",
        "request",
        "Author",
        "_",
        "server",
        "validID",
        "describe",
        "beforeEach",
        "deleteMany",
        "author",
        "name",
        "introduction",
        "save",
        "findOne",
        "_id",
        "error",
        "console",
        "log",
        "it",
        "done",
        "get",
        "set",
        "end",
        "err",
        "res",
        "body",
        "to",
        "be",
        "a",
        "length",
        "equal",
        "result",
        "map",
        "deep",
        "include",
        "e",
        "have",
        "property",
        "message",
        "equals",
        "post",
        "send",
        "then",
        "data",
        "after",
        "poemId",
        "put",
        "resp",
        "works"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "sourcesContent": [
        "const chai = require(\"chai\");\r\nconst expect = chai.expect;\r\nconst request = require(\"supertest\");\r\nlet Author = require(\"../../../models/authors\");\r\n\r\nconst _ = require(\"lodash\");\r\nlet server = require(\"../../../bin/www\");\r\nlet validID;\r\n\r\ndescribe(\"Authors\", () => {\r\n    beforeEach(async () => {\r\n        try {\r\n            await Author.deleteMany({});\r\n            let author = new Author();\r\n            author.name = \"Yeats\";\r\n            author.introduction = \"Irish poet and one of the foremost figures of 20th-century literature. \" +\r\n            \"A pillar of the Irish literary establishment, he helped to found the Abbey Theatre, \" +\r\n            \"and in his later years served two terms as a Senator of the Irish Free State.\";\r\n            await author.save();\r\n\r\n            author = new Author();\r\n            author.name = \"Du Fu\";\r\n            author.introduction = \"Du Fu was a prominent Chinese poet of the Tang dynasty.\";\r\n            await author.save();\r\n\r\n            author = await Author.findOne({ name:\"Yeats\" });\r\n            validID = author._id;\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    });\r\n\r\n    describe(\"GET /authors\", () => {\r\n        it(\"should return all the authors\", done => {\r\n            request(server)\r\n                .get(\"/authors\")\r\n                .set(\"Accept\", \"application/json\")\r\n                .expect(\"Content-Type\", /json/)\r\n                .expect(200)\r\n                .end((err, res) => {\r\n                    try{\r\n                        expect(res.body).to.be.a(\"array\");\r\n                        expect(res.body.length).to.equal(2);\r\n                        let result = _.map(res.body, author => {\r\n                            return { name: author.name};\r\n                        });\r\n                        expect(result).to.deep.include({ name: \"Yeats\" });\r\n                        expect(result).to.deep.include({ name: \"Du Fu\" });\r\n                        done();\r\n                    } catch (e) {\r\n                        done(e);\r\n                    }\r\n                });\r\n        });\r\n    });\r\n\r\n    describe(\"GET /authors/:id\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return the matching author\", done => {\r\n                request(server)\r\n                    .get(`/authors/${validID}`)\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body[0]).to.have.property(\"name\",\"Yeats\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return the NOT found message\", done => {\r\n                request(server)\r\n                    .get(\"/authors/9999\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body.message).equals(\"Author NOT Found!\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"POST /authors\", () => {\r\n        it(\"should return confirmation message and update datastore\", () => {\r\n            const author = {\r\n                name:\"Shakespeare\",\r\n                introduction:\"Great Great English play writer and poet\"\r\n            };\r\n            return request(server)\r\n                .post(\"/authors\")\r\n                .send(author)\r\n                .expect(200)\r\n                .then(res => {\r\n                    expect(res.body.message).equals(\"Author Successfully Added!\");\r\n                    validID = res.body.data._id;\r\n                });\r\n        });\r\n        after(() => {\r\n            return request(server)\r\n                .get(`/authors/${validID}`)\r\n                .expect(200)\r\n                .then(res => {\r\n                    expect(res.body[0]).to.have.property(\"name\", \"Shakespeare\");\r\n                    expect(res.body[0]).to.have.property(\"introduction\",\"Great Great English play writer and poet\");\r\n                });\r\n        });\r\n    });\r\n    describe(\"PUT /authors/:id/deleteWork\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return a message and the author work is added\", () => {\r\n                const poemId = {poemId: \"5dc14e4fb7ee92384c501889\"};\r\n                return request(server)\r\n                    .put(`/authors/${validID}/deleteWork`)\r\n                    .send(poemId)\r\n                    .expect(200)\r\n                    .then(resp => {\r\n                        expect(resp.body).to.include({message: \"Work Successfully deleted!\"});\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return information is wrong\", () => {\r\n                const poemId = {poemId: \"5dc14e4fb7ee92384c501889\"};\r\n                return request(server)\r\n                    .put(\"/authors/34343/deleteWork\")\r\n                    .send(poemId)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Author NOT Found!\");\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"PUT /authors/:id/works\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return a message and the author work is added\", () => {\r\n                const poemId = {poemId: \"5dc14e4fb7ee92384c501889\"};\r\n                return request(server)\r\n                    .put(`/authors/${validID}/works`)\r\n                    .send(poemId)\r\n                    .expect(200)\r\n                    .then(resp => {\r\n                        expect(resp.body).to.include({message: \"Work Successfully Added!\"});\r\n                        expect(resp.body.data.works[0]).equals(\"5dc14e4fb7ee92384c501889\");\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/authors/${validID}`)\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .then(resp => {\r\n                        expect(resp.body[0].works[0]).equals(\"5dc14e4fb7ee92384c501889\");\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return information is wrong\", () => {\r\n                const poemId = {poemId: \"5dc14e4fb7ee92384c501889\"};\r\n                return request(server)\r\n                    .put(\"/authors/34343/works\")\r\n                    .send(poemId)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Author NOT Found!\");\r\n                    });\r\n            });\r\n        });\r\n    });\r\n\r\n    /*describe.only(\"PUT /authors/:id/like\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return a message and the author is liked\", () => {\r\n                const userCredentials = {\r\n                    email: 'LovYeats@lala.com',\r\n                    password: 'trytry123'\r\n                }\r\n                var authenticatedUser = request.agent(app);\r\n                before(function(done){\r\n                    authenticatedUser\r\n                        .post('/users/login')\r\n                        .send(userCredentials)\r\n                        .end(function(err, response){\r\n                            expect(response.statusCode).to.equal(200);\r\n                            done();\r\n                        });\r\n                });\r\n                authenticatedUser.put(`/authors/${validID}/like`)\r\n                    .expect(200)\r\n                    .then(resp => {\r\n                        expect(resp.body).to.include({message: \"Author Successfully Liked!\"});\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/authors/${validID}`)\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .then(resp => {\r\n                        expect(resp.body[0].works[0]).equals(\"5dc14e4fb7ee92384c501889\");\r\n                    });\r\n            });\r\n        });*/\r\n    /*describe(\"when the id is invalid\", () => {\r\n            it(\"should return information is wrong\", () => {\r\n                const poemId = {poemId: \"5dc14e4fb7ee92384c501889\"};\r\n                return request(server)\r\n                    .put(`/authors/34343/works`)\r\n                    .send(poemId)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Author NOT Found!\");\r\n                    });\r\n            });\r\n        });\r\n    });*/\r\n});\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572965271162
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\\\\authors.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\models\\authors.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\models\\authors.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\models\\authors.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
        "sourceFileName": "authors.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('../routes/connectDB'); // mongoose.Promise = require('bluebird');\n\n\nlet Schema = mongoose.Schema;\nlet AuthorSchema = new Schema({\n  name: String,\n  introduction: String,\n  works: [{\n    type: Schema.Types.ObjectId,\n    ref: 'poems'\n  }],\n  likes: [{\n    type: Schema.Types.ObjectId,\n    ref: 'users'\n  }]\n}, {\n  collection: 'author'\n});\nvar Author = mongoose.model('Author', AuthorSchema);\nmodule.exports = Author;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhvcnMuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiU2NoZW1hIiwiQXV0aG9yU2NoZW1hIiwibmFtZSIsIlN0cmluZyIsImludHJvZHVjdGlvbiIsIndvcmtzIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJsaWtlcyIsImNvbGxlY3Rpb24iLCJBdXRob3IiLCJtb2RlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLHFCQUFELENBQXRCLEMsQ0FDQTs7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRixRQUFRLENBQUNFLE1BQXRCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLElBQUlELE1BQUosQ0FBVztBQUN0QkUsRUFBQUEsSUFBSSxFQUFFQyxNQURnQjtBQUV0QkMsRUFBQUEsWUFBWSxFQUFFRCxNQUZRO0FBR3RCRSxFQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUFDQyxJQUFBQSxJQUFJLEVBQUVOLE1BQU0sQ0FBQ08sS0FBUCxDQUFhQyxRQUFwQjtBQUE4QkMsSUFBQUEsR0FBRyxFQUFFO0FBQW5DLEdBQUQsQ0FIZTtBQUl0QkMsRUFBQUEsS0FBSyxFQUFFLENBQUM7QUFBQ0osSUFBQUEsSUFBSSxFQUFFTixNQUFNLENBQUNPLEtBQVAsQ0FBYUMsUUFBcEI7QUFBOEJDLElBQUFBLEdBQUcsRUFBRTtBQUFuQyxHQUFEO0FBSmUsQ0FBWCxFQU1mO0FBQUVFLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBTmUsQ0FBbkI7QUFXQSxJQUFJQyxNQUFNLEdBQUdkLFFBQVEsQ0FBQ2UsS0FBVCxDQUFlLFFBQWYsRUFBeUJaLFlBQXpCLENBQWI7QUFDQWEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxNQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcV2Vic3Rvcm1cXHBvZXRyeVdlYlxcbW9kZWxzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi4vcm91dGVzL2Nvbm5lY3REQicpO1xyXG4vLyBtb25nb29zZS5Qcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcclxuXHJcbmxldCBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XHJcbmxldCBBdXRob3JTY2hlbWEgPSBuZXcgU2NoZW1hKHtcclxuICAgICAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICAgICAgaW50cm9kdWN0aW9uOiBTdHJpbmcsXHJcbiAgICAgICAgd29ya3M6IFt7dHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdwb2Vtcyd9XSxcclxuICAgICAgICBsaWtlczogW3t0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ3VzZXJzJ31dXHJcbiAgICB9LFxyXG4gICAgeyBjb2xsZWN0aW9uOiAnYXV0aG9yJ31cclxuKTtcclxuXHJcblxyXG5cclxudmFyIEF1dGhvciA9IG1vbmdvb3NlLm1vZGVsKCdBdXRob3InLCBBdXRob3JTY2hlbWEpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhvcjtcclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "authors.js"
      ],
      "names": [
        "mongoose",
        "require",
        "Schema",
        "AuthorSchema",
        "name",
        "String",
        "introduction",
        "works",
        "type",
        "Types",
        "ObjectId",
        "ref",
        "likes",
        "collection",
        "Author",
        "model",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CACA;;;AAEA,IAAIC,MAAM,GAAGF,QAAQ,CAACE,MAAtB;AACA,IAAIC,YAAY,GAAG,IAAID,MAAJ,CAAW;AACtBE,EAAAA,IAAI,EAAEC,MADgB;AAEtBC,EAAAA,YAAY,EAAED,MAFQ;AAGtBE,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD,CAHe;AAItBC,EAAAA,KAAK,EAAE,CAAC;AAACJ,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD;AAJe,CAAX,EAMf;AAAEE,EAAAA,UAAU,EAAE;AAAd,CANe,CAAnB;AAWA,IAAIC,MAAM,GAAGd,QAAQ,CAACe,KAAT,CAAe,QAAf,EAAyBZ,YAAzB,CAAb;AACAa,MAAM,CAACC,OAAP,GAAiBH,MAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "sourcesContent": [
        "let mongoose = require('../routes/connectDB');\r\n// mongoose.Promise = require('bluebird');\r\n\r\nlet Schema = mongoose.Schema;\r\nlet AuthorSchema = new Schema({\r\n        name: String,\r\n        introduction: String,\r\n        works: [{type: Schema.Types.ObjectId, ref: 'poems'}],\r\n        likes: [{type: Schema.Types.ObjectId, ref: 'users'}]\r\n    },\r\n    { collection: 'author'}\r\n);\r\n\r\n\r\n\r\nvar Author = mongoose.model('Author', AuthorSchema);\r\nmodule.exports = Author;\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572830873514
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\connectDB.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\connectDB.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\connectDB.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\connectDB.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "connectDB.js"
      }
    },
    "ast": null,
    "code": "const mongoose = require(\"mongoose\");\n\nlet username = \"YutingJing_24\";\nlet password = \"cindyJing97\";\nlet mongodbUri = \"mongodb+srv://\" + username + \":\" + password + \"@cluster0-evhrz.mongodb.net/artifactsdb\";\nmongoose.connect(mongodbUri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nvar db = mongoose.connection;\ndb.on(\"error\", function (err) {\n  console.log(\"Unable to Connect to [ \" + db.name + \" ]\", err);\n});\ndb.once(\"open\", function () {\n  console.log(\"Successfully Connected to [ \" + db.name + \" ]\");\n});\nmodule.exports = mongoose; // module.exports = db;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3REQi5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibW9uZ29kYlVyaSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJkYiIsImNvbm5lY3Rpb24iLCJvbiIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJuYW1lIiwib25jZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7O0FBRUEsSUFBSUMsUUFBUSxHQUFHLGVBQWY7QUFDQSxJQUFJQyxRQUFRLEdBQUcsYUFBZjtBQUVBLElBQUlDLFVBQVUsR0FBQyxtQkFBaUJGLFFBQWpCLEdBQTRCLEdBQTVCLEdBQWtDQyxRQUFsQyxHQUE0Qyx5Q0FBM0Q7QUFFQUgsUUFBUSxDQUFDSyxPQUFULENBQWlCRCxVQUFqQixFQUE0QjtBQUFDRSxFQUFBQSxlQUFlLEVBQUUsSUFBbEI7QUFBd0JDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTVDLENBQTVCO0FBRUEsSUFBSUMsRUFBRSxHQUFHUixRQUFRLENBQUNTLFVBQWxCO0FBRUFELEVBQUUsQ0FBQ0UsRUFBSCxDQUFNLE9BQU4sRUFBZSxVQUFVQyxHQUFWLEVBQWU7QUFDMUJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDRCQUE0QkwsRUFBRSxDQUFDTSxJQUEvQixHQUFzQyxJQUFsRCxFQUF3REgsR0FBeEQ7QUFDSCxDQUZEO0FBSUFILEVBQUUsQ0FBQ08sSUFBSCxDQUFRLE1BQVIsRUFBZ0IsWUFBWTtBQUN4QkgsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksaUNBQWlDTCxFQUFFLENBQUNNLElBQXBDLEdBQTJDLElBQXZEO0FBQ0gsQ0FGRDtBQUtBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixRQUFqQixDLENBQ0EiLCJzb3VyY2VSb290IjoiRDpcXFdlYnN0b3JtXFxwb2V0cnlXZWJcXHJvdXRlcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xyXG5cclxubGV0IHVzZXJuYW1lID0gXCJZdXRpbmdKaW5nXzI0XCI7XHJcbmxldCBwYXNzd29yZCA9IFwiY2luZHlKaW5nOTdcIjtcclxuXHJcbmxldCBtb25nb2RiVXJpPVwibW9uZ29kYitzcnY6Ly9cIit1c2VybmFtZSArIFwiOlwiICsgcGFzc3dvcmQgK1wiQGNsdXN0ZXIwLWV2aHJ6Lm1vbmdvZGIubmV0L2FydGlmYWN0c2RiXCI7XHJcblxyXG5tb25nb29zZS5jb25uZWN0KG1vbmdvZGJVcmkse3VzZU5ld1VybFBhcnNlcjogdHJ1ZSwgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlfSk7XHJcblxyXG52YXIgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xyXG5cclxuZGIub24oXCJlcnJvclwiLCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlVuYWJsZSB0byBDb25uZWN0IHRvIFsgXCIgKyBkYi5uYW1lICsgXCIgXVwiLCBlcnIpO1xyXG59KTtcclxuXHJcbmRiLm9uY2UoXCJvcGVuXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bGx5IENvbm5lY3RlZCB0byBbIFwiICsgZGIubmFtZSArIFwiIF1cIik7XHJcbn0pO1xyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2U7XHJcbi8vIG1vZHVsZS5leHBvcnRzID0gZGI7XHJcblxyXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "connectDB.js"
      ],
      "names": [
        "mongoose",
        "require",
        "username",
        "password",
        "mongodbUri",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "db",
        "connection",
        "on",
        "err",
        "console",
        "log",
        "name",
        "once",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAIC,QAAQ,GAAG,eAAf;AACA,IAAIC,QAAQ,GAAG,aAAf;AAEA,IAAIC,UAAU,GAAC,mBAAiBF,QAAjB,GAA4B,GAA5B,GAAkCC,QAAlC,GAA4C,yCAA3D;AAEAH,QAAQ,CAACK,OAAT,CAAiBD,UAAjB,EAA4B;AAACE,EAAAA,eAAe,EAAE,IAAlB;AAAwBC,EAAAA,kBAAkB,EAAE;AAA5C,CAA5B;AAEA,IAAIC,EAAE,GAAGR,QAAQ,CAACS,UAAlB;AAEAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAe,UAAUC,GAAV,EAAe;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BL,EAAE,CAACM,IAA/B,GAAsC,IAAlD,EAAwDH,GAAxD;AACH,CAFD;AAIAH,EAAE,CAACO,IAAH,CAAQ,MAAR,EAAgB,YAAY;AACxBH,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCL,EAAE,CAACM,IAApC,GAA2C,IAAvD;AACH,CAFD;AAKAE,MAAM,CAACC,OAAP,GAAiBjB,QAAjB,C,CACA",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "const mongoose = require(\"mongoose\");\r\n\r\nlet username = \"YutingJing_24\";\r\nlet password = \"cindyJing97\";\r\n\r\nlet mongodbUri=\"mongodb+srv://\"+username + \":\" + password +\"@cluster0-evhrz.mongodb.net/artifactsdb\";\r\n\r\nmongoose.connect(mongodbUri,{useNewUrlParser: true, useUnifiedTopology: true});\r\n\r\nvar db = mongoose.connection;\r\n\r\ndb.on(\"error\", function (err) {\r\n    console.log(\"Unable to Connect to [ \" + db.name + \" ]\", err);\r\n});\r\n\r\ndb.once(\"open\", function () {\r\n    console.log(\"Successfully Connected to [ \" + db.name + \" ]\");\r\n});\r\n\r\n\r\nmodule.exports = mongoose;\r\n// module.exports = db;\r\n\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572964648282
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\app.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\app.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "var express = require('express');\n\nvar path = require('path');\n\nvar logger = require('morgan');\n\nvar cookieParser = require('cookie-parser');\n\nvar bodyParser = require('body-parser');\n\nvar session = require('express-session');\n\nvar MongoStore = require('connect-mongo')(session);\n\nlet db = require('./routes/connectDB').connection;\n\nvar createError = require('http-errors');\n\nvar indexRouter = require('./routes/index');\n\nconst users = require('./routes/users');\n\nconst poems = require(\"./routes/poems\");\n\nconst authors = require(\"./routes/authors\");\n\nvar app = express(); // view engine setup\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs'); //use sessions for tracking logins\n\napp.use(session({\n  secret: 'work hard',\n  resave: true,\n  saveUninitialized: false,\n  store: new MongoStore({\n    mongooseConnection: db\n  })\n}));\napp.use(logger('dev'));\n/*\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n*/\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\nif (process.env.NODE_ENV !== \"test\") {\n  app.use(logger(\"dev\"));\n}\n\napp.use('/', indexRouter);\napp.use('/users', users);\napp.get('/users', users.findAllUsers);\napp.get('/users/:id', users.findOneUser);\napp.get('/usersLogout', users.userLogout);\napp.post('/usersRegister', users.addAUser);\napp.post('/users/login', users.userLogin);\napp.delete('/users/:id', users.deleteUser);\napp.get('/poems', poems.findAllPoems);\napp.get('/poems/:id', poems.findOnePoem);\napp.post('/poems', poems.addPoem);\n/*\r\napp.put('/poems/:id/like', poems.incrementLikes);\r\napp.put('/poems/:id/unlike',poems.decreaseLikes);*/\n\napp.delete('/poems/:id', poems.deletePoem); // app.get('/poems/likes', poems.findTotalLikes);\n\napp.get('/authors', authors.findAllAuthors);\napp.get('/authors/:id', authors.findOneAuthor);\napp.post('/authors', authors.addAuthor);\n/*\r\napp.put('/authors/:id/like',authors.incrementLikes);\r\napp.put('/authors/:id/unlike',authors.decreaseLikes);*/\n\napp.put('/authors/:id/works', authors.incrementWorks);\napp.put('/authors/:id/deleteWork', authors.deleteWorks);\napp.delete('/authors/:id', authors.deleteAuthor); // catch 404 and forward to error handler\n\napp.use(function (req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n}); // error handlers\n// development error handler\n// will print stacktrace\n\nif (app.get('env') === 'development') {\n  app.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err\n    });\n  });\n} // production error handler\n// no stacktraces leaked to user\n\n\napp.use(function (err, req, res, next) {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\nmodule.exports = app;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "express",
        "require",
        "path",
        "logger",
        "cookieParser",
        "bodyParser",
        "session",
        "MongoStore",
        "db",
        "connection",
        "createError",
        "indexRouter",
        "users",
        "poems",
        "authors",
        "app",
        "set",
        "join",
        "__dirname",
        "use",
        "secret",
        "resave",
        "saveUninitialized",
        "store",
        "mongooseConnection",
        "json",
        "urlencoded",
        "extended",
        "static",
        "process",
        "env",
        "NODE_ENV",
        "get",
        "findAllUsers",
        "findOneUser",
        "userLogout",
        "post",
        "addAUser",
        "userLogin",
        "delete",
        "deleteUser",
        "findAllPoems",
        "findOnePoem",
        "addPoem",
        "deletePoem",
        "findAllAuthors",
        "findOneAuthor",
        "addAuthor",
        "put",
        "incrementWorks",
        "deleteWorks",
        "deleteAuthor",
        "req",
        "res",
        "next",
        "err",
        "Error",
        "status",
        "render",
        "message",
        "error",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb",
      "sourcesContent": [
        "var express = require('express');\r\nvar path = require('path');\r\nvar logger = require('morgan');\r\nvar cookieParser = require('cookie-parser');\r\nvar bodyParser = require('body-parser');\r\nvar session = require('express-session');\r\nvar MongoStore = require('connect-mongo')(session);\r\nlet db = require('./routes/connectDB').connection;\r\nvar createError = require('http-errors');\r\n\r\nvar indexRouter = require('./routes/index');\r\nconst users = require('./routes/users');\r\nconst poems = require(\"./routes/poems\");\r\nconst authors = require(\"./routes/authors\");\r\n\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'ejs');\r\n\r\n//use sessions for tracking logins\r\napp.use(session({\r\n    secret: 'work hard',\r\n    resave: true,\r\n    saveUninitialized: false,\r\n    store: new MongoStore({\r\n        mongooseConnection: db\r\n    })\r\n}));\r\n\r\napp.use(logger('dev'));\r\n/*\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n*/\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\nif (process.env.NODE_ENV !== \"test\") {\r\n    app.use(logger(\"dev\"))\r\n}\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', users);\r\n\r\napp.get('/users', users.findAllUsers);\r\napp.get('/users/:id', users.findOneUser);\r\napp.get('/usersLogout',users.userLogout);\r\napp.post('/usersRegister',users.addAUser);\r\napp.post('/users/login',users.userLogin);\r\napp.delete('/users/:id', users.deleteUser);\r\n\r\napp.get('/poems', poems.findAllPoems);\r\napp.get('/poems/:id', poems.findOnePoem)\r\napp.post('/poems',poems.addPoem);/*\r\napp.put('/poems/:id/like', poems.incrementLikes);\r\napp.put('/poems/:id/unlike',poems.decreaseLikes);*/\r\napp.delete('/poems/:id', poems.deletePoem);\r\n// app.get('/poems/likes', poems.findTotalLikes);\r\n\r\napp.get('/authors', authors.findAllAuthors);\r\napp.get('/authors/:id', authors.findOneAuthor);\r\napp.post('/authors',authors.addAuthor);/*\r\napp.put('/authors/:id/like',authors.incrementLikes);\r\napp.put('/authors/:id/unlike',authors.decreaseLikes);*/\r\napp.put('/authors/:id/works',authors.incrementWorks);\r\napp.put('/authors/:id/deleteWork',authors.deleteWorks);\r\napp.delete('/authors/:id', authors.deleteAuthor);\r\n\r\n\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n    var err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\n// error handlers\r\n\r\n// development error handler\r\n// will print stacktrace\r\nif (app.get('env') === 'development') {\r\n    app.use(function(err, req, res, next) {\r\n        res.status(err.status || 500);\r\n        res.render('error', {\r\n            message: err.message,\r\n            error: err\r\n        });\r\n    });\r\n}\r\n\r\n// production error handler\r\n// no stacktraces leaked to user\r\napp.use(function(err, req, res, next) {\r\n    res.status(err.status || 500);\r\n    res.render('error', {\r\n        message: err.message,\r\n        error: {}\r\n    });\r\n});\r\n\r\n\r\nmodule.exports = app;\r\n\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572963337712
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "var express = require(\"express\");\n\nvar router = express.Router();\n/* GET home page. */\n\nrouter.get(\"/\", function (req, res) {\n  res.render(\"index\", {\n    title: \"Daily Poem Recommendation\"\n  });\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwicmVuZGVyIiwidGl0bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlDLE1BQU0sR0FBR0YsT0FBTyxDQUFDRyxNQUFSLEVBQWI7QUFFQTs7QUFDQUQsTUFBTSxDQUFDRSxHQUFQLENBQVcsR0FBWCxFQUFnQixVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFDL0JBLEVBQUFBLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLE9BQVgsRUFBb0I7QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBcEI7QUFDSCxDQUZEO0FBSUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsTUFBakIiLCJzb3VyY2VSb290IjoiRDpcXFdlYnN0b3JtXFxwb2V0cnlXZWJcXHJvdXRlcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIik7XHJcbnZhciByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5cclxuLyogR0VUIGhvbWUgcGFnZS4gKi9cclxucm91dGVyLmdldChcIi9cIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcclxuICAgIHJlcy5yZW5kZXIoXCJpbmRleFwiLCB7IHRpdGxlOiBcIkRhaWx5IFBvZW0gUmVjb21tZW5kYXRpb25cIiB9KTtcclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "get",
        "req",
        "res",
        "render",
        "title",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;AAEA;;AACAD,MAAM,CAACE,GAAP,CAAW,GAAX,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC/BA,EAAAA,GAAG,CAACC,MAAJ,CAAW,OAAX,EAAoB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApB;AACH,CAFD;AAIAC,MAAM,CAACC,OAAP,GAAiBR,MAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "var express = require(\"express\");\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get(\"/\", function(req, res) {\r\n    res.render(\"index\", { title: \"Daily Poem Recommendation\" });\r\n});\r\n\r\nmodule.exports = router;\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572964718481
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\users.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\users.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\users.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\users.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "users.js"
      }
    },
    "ast": null,
    "code": "let User = require(\"../models/users\");\n\nlet express = require(\"express\");\n\nlet router = express.Router();\n/* GET users listing. */\n\n/*router.get('/', function(req, res, next) {\r\n  res.send('respond with a resource');\r\n});*/\n\nrouter.findAllUsers = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader(\"Content-Type\", \"application/json\"); // res.send(JSON.stringify(poems,null,5));\n\n  User.find(function (err, users) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(users, null, 5));\n  });\n};\n\nrouter.findOneUser = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  User.find({\n    \"_id\": req.params.id\n  }, function (err, user) {\n    if (err) res.json({\n      message: \"User NOT Found!\",\n      errmsg: err\n    });else res.send(JSON.stringify(user, null, 5));\n  });\n};\n\nrouter.addAUser = (req, res) => {\n  // confirm that user typed same password twice\n  if (req.body.password !== req.body.passwordConf) {\n    res.json({\n      message: \"Passwords do not match.\"\n    }); // return next(err);\n  } // If the email hasn't been registered\n  //Add a new user to our list if all the fields are filled (Register)\n  else if (req.body.email && req.body.username && req.body.password && req.body.passwordConf && req.body.gender) {\n      var user = new User();\n      user.username = req.body.username;\n      user.email = req.body.email;\n      user.password = req.body.password;\n      user.gender = req.body.gender;\n      user.save(function (err) {\n        if (err) res.json({\n          message: \"User NOT Added!\",\n          errmsg: err\n        });else {\n          req.session.userId = user._id;\n          res.json({\n            message: \"User Successfully Added(Registered)!\",\n            data: user\n          }); // return res.redi ('/profile');\n        }\n      });\n    } else {\n      res.json({\n        message: \"All fields required\"\n      }); // var err = new Error('All fields required.');\n      // err.status = 400;\n      // return next(err);\n    }\n}; // GET users/login\n\n\nrouter.userLogin = (req, res) => {\n  if (req.body.logemail && req.body.logpassword) {\n    User.authenticate(req.body.logemail, req.body.logpassword, function (error, user) {\n      if (error || !user) {\n        res.json({\n          message: \"Wrong email or password!\"\n        }); // var err = new Error('Wrong email or password.');\n        // err.status = 401;\n        // return next(err);\n      } else {\n        req.session.userId = user._id;\n        res.json({\n          data: req.session.userId,\n          message: \"User Successfully Login!\"\n        }); // return res.redi ('/profile');\n      }\n    });\n  }\n}; // GET users/logout\n\n\nrouter.userLogout = (req, res, next) => {\n  if (req.session) {\n    // delete session object\n    req.session.destroy(function (err) {\n      if (err) {\n        return next(err);\n      } else {\n        // return res.redirect('/');\n        res.json({\n          message: \"Successfully log out!\",\n          data: req.session\n        });\n      }\n    });\n  }\n};\n\nrouter.deleteUser = (req, res) => {\n  User.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: \"User NOT DELETED!\",\n      errmsg: err\n    });else res.json({\n      message: \"User Successfully Deleted!\"\n    });\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "users.js"
      ],
      "names": [
        "User",
        "require",
        "express",
        "router",
        "Router",
        "findAllUsers",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "users",
        "send",
        "JSON",
        "stringify",
        "findOneUser",
        "params",
        "id",
        "user",
        "json",
        "message",
        "errmsg",
        "addAUser",
        "body",
        "password",
        "passwordConf",
        "email",
        "username",
        "gender",
        "save",
        "session",
        "userId",
        "_id",
        "data",
        "userLogin",
        "logemail",
        "logpassword",
        "authenticate",
        "error",
        "userLogout",
        "next",
        "destroy",
        "deleteUser",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAlB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAACE,MAAR,EAAb;AAEA;;AACA;;;;AAKAD,MAAM,CAACE,YAAP,GAAsB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChC;AACAA,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B,EAFgC,CAGhC;;AACAR,EAAAA,IAAI,CAACS,IAAL,CAAU,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAC3B,QAAID,GAAJ,EACIH,GAAG,CAACK,IAAJ,CAASF,GAAT;AACJH,IAAAA,GAAG,CAACK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeH,KAAf,EAAqB,IAArB,EAA0B,CAA1B,CAAT;AACH,GAJD;AAKH,CATD;;AAYAR,MAAM,CAACY,WAAP,GAAqB,CAACT,GAAD,EAAMC,GAAN,KAAc;AAC/BA,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA6B,kBAA7B;AACAR,EAAAA,IAAI,CAACS,IAAL,CAAU;AAAE,WAAQH,GAAG,CAACU,MAAJ,CAAWC;AAArB,GAAV,EAAoC,UAASP,GAAT,EAAcQ,IAAd,EAAoB;AACpD,QAAIR,GAAJ,EACIH,GAAG,CAACY,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,iBAAX;AAA8BC,MAAAA,MAAM,EAAGX;AAAvC,KAAT,EADJ,KAGIH,GAAG,CAACK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeI,IAAf,EAAoB,IAApB,EAAyB,CAAzB,CAAT;AACP,GALD;AAMH,CARD;;AAUAf,MAAM,CAACmB,QAAP,GAAkB,CAAChB,GAAD,EAAMC,GAAN,KAAc;AAC5B;AACA,MAAID,GAAG,CAACiB,IAAJ,CAASC,QAAT,KAAsBlB,GAAG,CAACiB,IAAJ,CAASE,YAAnC,EAAiD;AAC7ClB,IAAAA,GAAG,CAACY,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT,EAD6C,CAE7C;AACH,GAHD,CAIA;AACA;AALA,OAMK,IAAGd,GAAG,CAACiB,IAAJ,CAASG,KAAT,IAAkBpB,GAAG,CAACiB,IAAJ,CAASI,QAA3B,IAAuCrB,GAAG,CAACiB,IAAJ,CAASC,QAAhD,IAA4DlB,GAAG,CAACiB,IAAJ,CAASE,YAArE,IAAqFnB,GAAG,CAACiB,IAAJ,CAASK,MAAjG,EAAyG;AAC1G,UAAIV,IAAI,GAAG,IAAIlB,IAAJ,EAAX;AACAkB,MAAAA,IAAI,CAACS,QAAL,GAAgBrB,GAAG,CAACiB,IAAJ,CAASI,QAAzB;AACAT,MAAAA,IAAI,CAACQ,KAAL,GAAapB,GAAG,CAACiB,IAAJ,CAASG,KAAtB;AACAR,MAAAA,IAAI,CAACM,QAAL,GAAgBlB,GAAG,CAACiB,IAAJ,CAASC,QAAzB;AACAN,MAAAA,IAAI,CAACU,MAAL,GAActB,GAAG,CAACiB,IAAJ,CAASK,MAAvB;AAEAV,MAAAA,IAAI,CAACW,IAAL,CAAU,UAAUnB,GAAV,EAAe;AACrB,YAAIA,GAAJ,EACIH,GAAG,CAACY,IAAJ,CAAS;AAACC,UAAAA,OAAO,EAAE,iBAAV;AAA6BC,UAAAA,MAAM,EAAEX;AAArC,SAAT,EADJ,KAEK;AACDJ,UAAAA,GAAG,CAACwB,OAAJ,CAAYC,MAAZ,GAAqBb,IAAI,CAACc,GAA1B;AACAzB,UAAAA,GAAG,CAACY,IAAJ,CAAS;AAACC,YAAAA,OAAO,EAAE,sCAAV;AAAkDa,YAAAA,IAAI,EAAEf;AAAxD,WAAT,EAFC,CAGD;AACH;AACJ,OARD;AASH,KAhBI,MAiBA;AACDX,MAAAA,GAAG,CAACY,IAAJ,CAAS;AAACC,QAAAA,OAAO,EAAE;AAAV,OAAT,EADC,CAED;AACA;AACA;AACH;AACJ,CA/BD,C,CAiCA;;;AACAjB,MAAM,CAAC+B,SAAP,GAAmB,CAAC5B,GAAD,EAAMC,GAAN,KAAc;AAC7B,MAAID,GAAG,CAACiB,IAAJ,CAASY,QAAT,IAAqB7B,GAAG,CAACiB,IAAJ,CAASa,WAAlC,EAA+C;AAC3CpC,IAAAA,IAAI,CAACqC,YAAL,CAAkB/B,GAAG,CAACiB,IAAJ,CAASY,QAA3B,EAAqC7B,GAAG,CAACiB,IAAJ,CAASa,WAA9C,EAA2D,UAAUE,KAAV,EAAiBpB,IAAjB,EAAuB;AAC9E,UAAIoB,KAAK,IAAI,CAACpB,IAAd,EAAoB;AAChBX,QAAAA,GAAG,CAACY,IAAJ,CAAS;AAACC,UAAAA,OAAO,EAAE;AAAV,SAAT,EADgB,CAEhB;AACA;AACA;AACH,OALD,MAKO;AACHd,QAAAA,GAAG,CAACwB,OAAJ,CAAYC,MAAZ,GAAqBb,IAAI,CAACc,GAA1B;AACAzB,QAAAA,GAAG,CAACY,IAAJ,CAAS;AAACc,UAAAA,IAAI,EAAE3B,GAAG,CAACwB,OAAJ,CAAYC,MAAnB;AAA2BX,UAAAA,OAAO,EAAE;AAApC,SAAT,EAFG,CAGH;AACH;AACJ,KAXD;AAYH;AACJ,CAfD,C,CAiBA;;;AACAjB,MAAM,CAACoC,UAAP,GAAoB,CAACjC,GAAD,EAAMC,GAAN,EAAWiC,IAAX,KAAoB;AACpC,MAAIlC,GAAG,CAACwB,OAAR,EAAiB;AACb;AACAxB,IAAAA,GAAG,CAACwB,OAAJ,CAAYW,OAAZ,CAAoB,UAAS/B,GAAT,EAAc;AAC9B,UAAGA,GAAH,EAAQ;AACJ,eAAO8B,IAAI,CAAC9B,GAAD,CAAX;AACH,OAFD,MAEO;AACH;AACAH,QAAAA,GAAG,CAACY,IAAJ,CAAS;AAACC,UAAAA,OAAO,EAAE,uBAAV;AAAmCa,UAAAA,IAAI,EAAC3B,GAAG,CAACwB;AAA5C,SAAT;AACH;AACJ,KAPD;AAQH;AACJ,CAZD;;AAcA3B,MAAM,CAACuC,UAAP,GAAoB,CAACpC,GAAD,EAAMC,GAAN,KAAc;AAC9BP,EAAAA,IAAI,CAAC2C,iBAAL,CAAuBrC,GAAG,CAACU,MAAJ,CAAWC,EAAlC,EAAsC,UAASP,GAAT,EAAc;AAChD,QAAIA,GAAJ,EACIH,GAAG,CAACY,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGX;AAAzC,KAAT,EADJ,KAGIH,GAAG,CAACY,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACP,GALD;AAMH,CAPD;;AASAwB,MAAM,CAACC,OAAP,GAAiB1C,MAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "let User = require(\"../models/users\");\r\nlet express = require(\"express\");\r\nlet router = express.Router();\r\n\r\n/* GET users listing. */\r\n/*router.get('/', function(req, res, next) {\r\n  res.send('respond with a resource');\r\n});*/\r\n\r\n\r\nrouter.findAllUsers = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    // res.send(JSON.stringify(poems,null,5));\r\n    User.find(function(err, users) {\r\n        if (err)\r\n            res.send(err);\r\n        res.send(JSON.stringify(users,null,5));\r\n    });\r\n};\r\n\r\n\r\nrouter.findOneUser = (req, res) => {\r\n    res.setHeader(\"Content-Type\",\"application/json\");\r\n    User.find({ \"_id\" : req.params.id },function(err, user) {\r\n        if (err)\r\n            res.json({ message: \"User NOT Found!\", errmsg : err } );\r\n        else\r\n            res.send(JSON.stringify(user,null,5));\r\n    });\r\n};\r\n\r\nrouter.addAUser = (req, res) => {\r\n    // confirm that user typed same password twice\r\n    if (req.body.password !== req.body.passwordConf) {\r\n        res.json({ message: \"Passwords do not match.\"} );\r\n        // return next(err);\r\n    }\r\n    // If the email hasn't been registered\r\n    //Add a new user to our list if all the fields are filled (Register)\r\n    else if(req.body.email && req.body.username && req.body.password && req.body.passwordConf && req.body.gender) {\r\n        var user = new User();\r\n        user.username = req.body.username;\r\n        user.email = req.body.email;\r\n        user.password = req.body.password;\r\n        user.gender = req.body.gender;\r\n\r\n        user.save(function (err) {\r\n            if (err)\r\n                res.json({message: \"User NOT Added!\", errmsg: err});\r\n            else {\r\n                req.session.userId = user._id;\r\n                res.json({message: \"User Successfully Added(Registered)!\", data: user});\r\n                // return res.redi ('/profile');\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        res.json({message: \"All fields required\"});\r\n        // var err = new Error('All fields required.');\r\n        // err.status = 400;\r\n        // return next(err);\r\n    }\r\n};\r\n\r\n// GET users/login\r\nrouter.userLogin = (req, res) => {\r\n    if (req.body.logemail && req.body.logpassword) {\r\n        User.authenticate(req.body.logemail, req.body.logpassword, function (error, user) {\r\n            if (error || !user) {\r\n                res.json({message: \"Wrong email or password!\"});\r\n                // var err = new Error('Wrong email or password.');\r\n                // err.status = 401;\r\n                // return next(err);\r\n            } else {\r\n                req.session.userId = user._id;\r\n                res.json({data: req.session.userId, message: \"User Successfully Login!\"});\r\n                // return res.redi ('/profile');\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n// GET users/logout\r\nrouter.userLogout = (req, res, next) => {\r\n    if (req.session) {\r\n        // delete session object\r\n        req.session.destroy(function(err) {\r\n            if(err) {\r\n                return next(err);\r\n            } else {\r\n                // return res.redirect('/');\r\n                res.json({message: \"Successfully log out!\", data:req.session});\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nrouter.deleteUser = (req, res) => {\r\n    User.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"User NOT DELETED!\", errmsg : err } );\r\n        else\r\n            res.json({ message: \"User Successfully Deleted!\"});\r\n    });\r\n};\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572964778095
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\\\\users.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\models\\users.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\models\\users.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\models\\users.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
        "sourceFileName": "users.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('../routes/connectDB');\n\nvar bcrypt = require('bcrypt');\n\nlet Schema = mongoose.Schema;\nlet UserSchema = new Schema({\n  username: {\n    type: String,\n    unique: true,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  gender: String,\n  likes: [{\n    type: Schema.Types.ObjectId,\n    ref: 'poems'\n  }]\n}, {\n  collection: 'users'\n}); //authenticate input against database\n\nUserSchema.statics.authenticate = function (email, password, callback) {\n  User.findOne({\n    email: email\n  }).exec(function (err, user) {\n    if (err) {\n      return callback(err);\n    } else if (!user) {\n      var err = new Error('User not found.');\n      err.status = 401;\n      return callback(err);\n    }\n\n    bcrypt.compare(password, user.password, function (err, result) {\n      if (result === true) {\n        return callback(null, user);\n      } else {\n        return callback();\n      }\n    });\n  });\n}; //hashing a password before saving it to the database\n\n\nUserSchema.pre('save', function (next) {\n  var user = this;\n  bcrypt.hash(user.password, 10, function (err, hash) {\n    if (err) {\n      return next(err);\n    }\n\n    user.password = hash;\n    next();\n  });\n});\nvar User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsImJjcnlwdCIsIlNjaGVtYSIsIlVzZXJTY2hlbWEiLCJ1c2VybmFtZSIsInR5cGUiLCJTdHJpbmciLCJ1bmlxdWUiLCJyZXF1aXJlZCIsInRyaW0iLCJlbWFpbCIsInBhc3N3b3JkIiwiZ2VuZGVyIiwibGlrZXMiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiY29sbGVjdGlvbiIsInN0YXRpY3MiLCJhdXRoZW50aWNhdGUiLCJjYWxsYmFjayIsIlVzZXIiLCJmaW5kT25lIiwiZXhlYyIsImVyciIsInVzZXIiLCJFcnJvciIsInN0YXR1cyIsImNvbXBhcmUiLCJyZXN1bHQiLCJwcmUiLCJuZXh0IiwiaGFzaCIsIm1vZGVsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBdEI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxJQUFJRSxNQUFNLEdBQUdILFFBQVEsQ0FBQ0csTUFBdEI7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBSUQsTUFBSixDQUFXO0FBQ3BCRSxFQUFBQSxRQUFRLEVBQUU7QUFDTkMsSUFBQUEsSUFBSSxFQUFFQyxNQURBO0FBRU5DLElBQUFBLE1BQU0sRUFBRSxJQUZGO0FBR05DLElBQUFBLFFBQVEsRUFBRSxJQUhKO0FBSU5DLElBQUFBLElBQUksRUFBRTtBQUpBLEdBRFU7QUFPcEJDLEVBQUFBLEtBQUssRUFBRTtBQUNITCxJQUFBQSxJQUFJLEVBQUVDLE1BREg7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLElBRkw7QUFHSEMsSUFBQUEsUUFBUSxFQUFFLElBSFA7QUFJSEMsSUFBQUEsSUFBSSxFQUFFO0FBSkgsR0FQYTtBQWFwQkUsRUFBQUEsUUFBUSxFQUFFO0FBQ05OLElBQUFBLElBQUksRUFBRUMsTUFEQTtBQUVORSxJQUFBQSxRQUFRLEVBQUU7QUFGSixHQWJVO0FBaUJwQkksRUFBQUEsTUFBTSxFQUFDTixNQWpCYTtBQWtCcEJPLEVBQUFBLEtBQUssRUFBRSxDQUFDO0FBQUNSLElBQUFBLElBQUksRUFBRUgsTUFBTSxDQUFDWSxLQUFQLENBQWFDLFFBQXBCO0FBQThCQyxJQUFBQSxHQUFHLEVBQUU7QUFBbkMsR0FBRDtBQWxCYSxDQUFYLEVBb0JiO0FBQUVDLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBcEJhLENBQWpCLEMsQ0F1QkE7O0FBQ0FkLFVBQVUsQ0FBQ2UsT0FBWCxDQUFtQkMsWUFBbkIsR0FBa0MsVUFBVVQsS0FBVixFQUFpQkMsUUFBakIsRUFBMkJTLFFBQTNCLEVBQXFDO0FBQ25FQyxFQUFBQSxJQUFJLENBQUNDLE9BQUwsQ0FBYTtBQUFDWixJQUFBQSxLQUFLLEVBQUVBO0FBQVIsR0FBYixFQUNLYSxJQURMLENBQ1UsVUFBVUMsR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQ3ZCLFFBQUlELEdBQUosRUFBUztBQUNMLGFBQU9KLFFBQVEsQ0FBQ0ksR0FBRCxDQUFmO0FBQ0gsS0FGRCxNQUdLLElBQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1osVUFBSUQsR0FBRyxHQUFHLElBQUlFLEtBQUosQ0FBVSxpQkFBVixDQUFWO0FBQ0FGLE1BQUFBLEdBQUcsQ0FBQ0csTUFBSixHQUFhLEdBQWI7QUFDQSxhQUFPUCxRQUFRLENBQUNJLEdBQUQsQ0FBZjtBQUNIOztBQUNEdkIsSUFBQUEsTUFBTSxDQUFDMkIsT0FBUCxDQUFlakIsUUFBZixFQUF5QmMsSUFBSSxDQUFDZCxRQUE5QixFQUF3QyxVQUFVYSxHQUFWLEVBQWVLLE1BQWYsRUFBdUI7QUFDM0QsVUFBSUEsTUFBTSxLQUFLLElBQWYsRUFBcUI7QUFDakIsZUFBT1QsUUFBUSxDQUFDLElBQUQsRUFBT0ssSUFBUCxDQUFmO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBT0wsUUFBUSxFQUFmO0FBQ0g7QUFDSixLQU5EO0FBT0gsR0FqQkw7QUFrQkgsQ0FuQkQsQyxDQXNCQTs7O0FBQ0FqQixVQUFVLENBQUMyQixHQUFYLENBQWUsTUFBZixFQUF1QixVQUFVQyxJQUFWLEVBQWdCO0FBQy9CLE1BQUlOLElBQUksR0FBRyxJQUFYO0FBQ0F4QixFQUFBQSxNQUFNLENBQUMrQixJQUFQLENBQVlQLElBQUksQ0FBQ2QsUUFBakIsRUFBMkIsRUFBM0IsRUFBK0IsVUFBVWEsR0FBVixFQUFlUSxJQUFmLEVBQXFCO0FBQzVDLFFBQUlSLEdBQUosRUFBUztBQUNELGFBQU9PLElBQUksQ0FBQ1AsR0FBRCxDQUFYO0FBQ1A7O0FBQ0RDLElBQUFBLElBQUksQ0FBQ2QsUUFBTCxHQUFnQnFCLElBQWhCO0FBQ0FELElBQUFBLElBQUk7QUFDWCxHQU5EO0FBT1AsQ0FURDtBQVlBLElBQUlWLElBQUksR0FBR3RCLFFBQVEsQ0FBQ2tDLEtBQVQsQ0FBZSxNQUFmLEVBQXVCOUIsVUFBdkIsQ0FBWDtBQUNBK0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZCxJQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcV2Vic3Rvcm1cXHBvZXRyeVdlYlxcbW9kZWxzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi4vcm91dGVzL2Nvbm5lY3REQicpO1xyXG52YXIgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0Jyk7XHJcblxyXG5sZXQgU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hO1xyXG5sZXQgVXNlclNjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgICAgIHVzZXJuYW1lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgdHJpbTogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW1haWw6IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICB1bmlxdWU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICB0cmltOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXNzd29yZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2VuZGVyOlN0cmluZyxcclxuICAgICAgICBsaWtlczogW3t0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ3BvZW1zJ31dXHJcbiAgICB9LFxyXG4gICAgeyBjb2xsZWN0aW9uOiAndXNlcnMnfVxyXG4pO1xyXG5cclxuLy9hdXRoZW50aWNhdGUgaW5wdXQgYWdhaW5zdCBkYXRhYmFzZVxyXG5Vc2VyU2NoZW1hLnN0YXRpY3MuYXV0aGVudGljYXRlID0gZnVuY3Rpb24gKGVtYWlsLCBwYXNzd29yZCwgY2FsbGJhY2spIHtcclxuICAgIFVzZXIuZmluZE9uZSh7ZW1haWw6IGVtYWlsfSlcclxuICAgICAgICAuZXhlYyhmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXVzZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kLicpO1xyXG4gICAgICAgICAgICAgICAgZXJyLnN0YXR1cyA9IDQwMTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdXNlcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG5cclxuLy9oYXNoaW5nIGEgcGFzc3dvcmQgYmVmb3JlIHNhdmluZyBpdCB0byB0aGUgZGF0YWJhc2VcclxuVXNlclNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgIHZhciB1c2VyID0gdGhpcztcclxuICAgICAgICBiY3J5cHQuaGFzaCh1c2VyLnBhc3N3b3JkLCAxMCwgZnVuY3Rpb24gKGVyciwgaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXNlci5wYXNzd29yZCA9IGhhc2g7XHJcbiAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgfSlcclxufSk7XHJcblxyXG5cclxudmFyIFVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIFVzZXJTY2hlbWEpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXI7Il19",
    "map": {
      "version": 3,
      "sources": [
        "users.js"
      ],
      "names": [
        "mongoose",
        "require",
        "bcrypt",
        "Schema",
        "UserSchema",
        "username",
        "type",
        "String",
        "unique",
        "required",
        "trim",
        "email",
        "password",
        "gender",
        "likes",
        "Types",
        "ObjectId",
        "ref",
        "collection",
        "statics",
        "authenticate",
        "callback",
        "User",
        "findOne",
        "exec",
        "err",
        "user",
        "Error",
        "status",
        "compare",
        "result",
        "pre",
        "next",
        "hash",
        "model",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIE,MAAM,GAAGH,QAAQ,CAACG,MAAtB;AACA,IAAIC,UAAU,GAAG,IAAID,MAAJ,CAAW;AACpBE,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,MAAM,EAAE,IAFF;AAGNC,IAAAA,QAAQ,EAAE,IAHJ;AAINC,IAAAA,IAAI,EAAE;AAJA,GADU;AAOpBC,EAAAA,KAAK,EAAE;AACHL,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,MAAM,EAAE,IAFL;AAGHC,IAAAA,QAAQ,EAAE,IAHP;AAIHC,IAAAA,IAAI,EAAE;AAJH,GAPa;AAapBE,EAAAA,QAAQ,EAAE;AACNN,IAAAA,IAAI,EAAEC,MADA;AAENE,IAAAA,QAAQ,EAAE;AAFJ,GAbU;AAiBpBI,EAAAA,MAAM,EAACN,MAjBa;AAkBpBO,EAAAA,KAAK,EAAE,CAAC;AAACR,IAAAA,IAAI,EAAEH,MAAM,CAACY,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD;AAlBa,CAAX,EAoBb;AAAEC,EAAAA,UAAU,EAAE;AAAd,CApBa,CAAjB,C,CAuBA;;AACAd,UAAU,CAACe,OAAX,CAAmBC,YAAnB,GAAkC,UAAUT,KAAV,EAAiBC,QAAjB,EAA2BS,QAA3B,EAAqC;AACnEC,EAAAA,IAAI,CAACC,OAAL,CAAa;AAACZ,IAAAA,KAAK,EAAEA;AAAR,GAAb,EACKa,IADL,CACU,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACvB,QAAID,GAAJ,EAAS;AACL,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACH,KAFD,MAGK,IAAI,CAACC,IAAL,EAAW;AACZ,UAAID,GAAG,GAAG,IAAIE,KAAJ,CAAU,iBAAV,CAAV;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,GAAb;AACA,aAAOP,QAAQ,CAACI,GAAD,CAAf;AACH;;AACDvB,IAAAA,MAAM,CAAC2B,OAAP,CAAejB,QAAf,EAAyBc,IAAI,CAACd,QAA9B,EAAwC,UAAUa,GAAV,EAAeK,MAAf,EAAuB;AAC3D,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACjB,eAAOT,QAAQ,CAAC,IAAD,EAAOK,IAAP,CAAf;AACH,OAFD,MAEO;AACH,eAAOL,QAAQ,EAAf;AACH;AACJ,KAND;AAOH,GAjBL;AAkBH,CAnBD,C,CAsBA;;;AACAjB,UAAU,CAAC2B,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AAC/B,MAAIN,IAAI,GAAG,IAAX;AACAxB,EAAAA,MAAM,CAAC+B,IAAP,CAAYP,IAAI,CAACd,QAAjB,EAA2B,EAA3B,EAA+B,UAAUa,GAAV,EAAeQ,IAAf,EAAqB;AAC5C,QAAIR,GAAJ,EAAS;AACD,aAAOO,IAAI,CAACP,GAAD,CAAX;AACP;;AACDC,IAAAA,IAAI,CAACd,QAAL,GAAgBqB,IAAhB;AACAD,IAAAA,IAAI;AACX,GAND;AAOP,CATD;AAYA,IAAIV,IAAI,GAAGtB,QAAQ,CAACkC,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,CAAX;AACA+B,MAAM,CAACC,OAAP,GAAiBd,IAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "sourcesContent": [
        "let mongoose = require('../routes/connectDB');\r\nvar bcrypt = require('bcrypt');\r\n\r\nlet Schema = mongoose.Schema;\r\nlet UserSchema = new Schema({\r\n        username: {\r\n            type: String,\r\n            unique: true,\r\n            required: true,\r\n            trim: true\r\n        },\r\n        email: {\r\n            type: String,\r\n            unique: true,\r\n            required: true,\r\n            trim: true\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        gender:String,\r\n        likes: [{type: Schema.Types.ObjectId, ref: 'poems'}]\r\n    },\r\n    { collection: 'users'}\r\n);\r\n\r\n//authenticate input against database\r\nUserSchema.statics.authenticate = function (email, password, callback) {\r\n    User.findOne({email: email})\r\n        .exec(function (err, user) {\r\n            if (err) {\r\n                return callback(err)\r\n            }\r\n            else if (!user) {\r\n                var err = new Error('User not found.');\r\n                err.status = 401;\r\n                return callback(err);\r\n            }\r\n            bcrypt.compare(password, user.password, function (err, result) {\r\n                if (result === true) {\r\n                    return callback(null, user);\r\n                } else {\r\n                    return callback();\r\n                }\r\n            })\r\n        });\r\n}\r\n\r\n\r\n//hashing a password before saving it to the database\r\nUserSchema.pre('save', function (next) {\r\n        var user = this;\r\n        bcrypt.hash(user.password, 10, function (err, hash) {\r\n                if (err) {\r\n                        return next(err);\r\n                }\r\n                user.password = hash;\r\n                next();\r\n        })\r\n});\r\n\r\n\r\nvar User = mongoose.model('User', UserSchema);\r\nmodule.exports = User;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572880122542
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\poems.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\poems.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\poems.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\poems.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "poems.js"
      }
    },
    "ast": null,
    "code": "let Poem = require(\"../models/poems\");\n\nlet express = require(\"express\");\n\nlet router = express.Router();\n\nrouter.findAllPoems = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Poem.find(function (err, poems) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(poems, null, 5));\n  });\n};\n\nrouter.findOnePoem = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Poem.find({\n    \"_id\": req.params.id\n  }, function (err, poem) {\n    if (err) res.json({\n      message: \"Poem NOT Found!\",\n      errmsg: err\n    });else res.send(JSON.stringify(poem, null, 5));\n  });\n};\n\nrouter.addPoem = (req, res) => {\n  //Add a new donation to our list\n  var poem = new Poem();\n  poem.title = req.body.title;\n  poem.author = req.body.author;\n  poem.save(function (err) {\n    if (err) res.json({\n      message: \"Poem NOT Added!\",\n      errmsg: err\n    });else res.json({\n      message: \"Poem Successfully Added!\",\n      data: poem\n    });\n  });\n};\n\nrouter.incrementLikes = (req, res) => {\n  Poem.findById(req.params.id, function (err, poem) {\n    if (err) res.json({\n      message: \"Poem NOT Found!\",\n      errmsg: err\n    });else {\n      poem.likes.push(req.session.userId);\n      /*if(poem.find( { likes: req.session.userId} )){\r\n          res.json({ message: 'You have already liked this poem!', errmsg : err } );\r\n      }\r\n      else {\r\n          poem.likes.push(req.session.userId);\r\n          //record which poem user liked, but didn't work. So users don't know what poems they have liked\r\n          User.findById(req.session.userId, function(err,user){\r\n              if (err)\r\n                  res.json({ message: 'User NOT Found!', errmsg : err } );\r\n              else {\r\n                  user.likes.push(poem._id);\r\n              }\r\n          })*/\n\n      poem.save(function (err) {\n        if (err) res.json({\n          message: \"Poem NOT liked!\",\n          errmsg: err\n        });else res.json({\n          message: \"Poem Successfully Liked!\",\n          data: poem\n        });\n      });\n    }\n  });\n};\n\nrouter.decreaseLikes = (req, res) => {\n  Poem.findById(req.params.id, function (err, poem) {\n    if (err) res.json({\n      message: \"Poem NOT Found!\",\n      errmsg: err\n    });else {\n      poem.likes.remove(req.session.userId);\n      poem.save(function (err) {\n        if (err) res.json({\n          message: \"Poem NOT liked!\",\n          errmsg: err\n        });else res.json({\n          message: \"Poem Successfully Unliked!\",\n          data: poem\n        });\n      });\n    }\n  });\n};\n\nrouter.deletePoem = (req, res) => {\n  Poem.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: \"Poem NOT DELETED!\",\n      errmsg: err\n    });else res.json({\n      message: \"Poem Successfully Deleted!\"\n    });\n  });\n};\n/*\r\nfunction getTotalLikes(array) {\r\n    let totalLikes = 0;\r\n    array.forEach(function(obj) { totalLikes += obj.likes; });\r\n    return totalLikes;\r\n}\r\n\r\nrouter.findTotalLikes = (req, res) => {\r\n    Poem.find(function(err, poem) {\r\n        if (err)\r\n            res.send(err);\r\n        else\r\n            res.json({ totalLikes : getTotalLikes(poem) });\r\n    });\r\n}*/\n\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "poems.js"
      ],
      "names": [
        "Poem",
        "require",
        "express",
        "router",
        "Router",
        "findAllPoems",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "poems",
        "send",
        "JSON",
        "stringify",
        "findOnePoem",
        "params",
        "id",
        "poem",
        "json",
        "message",
        "errmsg",
        "addPoem",
        "title",
        "body",
        "author",
        "save",
        "data",
        "incrementLikes",
        "findById",
        "likes",
        "push",
        "session",
        "userId",
        "decreaseLikes",
        "remove",
        "deletePoem",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "let Poem = require(\"../models/poems\");\r\nlet express = require(\"express\");\r\nlet router = express.Router();\r\n\r\nrouter.findAllPoems = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    Poem.find(function(err, poems) {\r\n        if (err)\r\n            res.send(err);\r\n        res.send(JSON.stringify(poems,null,5));\r\n    });\r\n};\r\n\r\n\r\nrouter.findOnePoem = (req, res) => {\r\n    res.setHeader(\"Content-Type\",\"application/json\");\r\n\r\n    Poem.find({ \"_id\" : req.params.id },function(err, poem) {\r\n        if (err)\r\n            res.json({ message: \"Poem NOT Found!\", errmsg : err } );\r\n        else\r\n            res.send(JSON.stringify(poem,null,5));\r\n    });\r\n};\r\n\r\nrouter.addPoem = (req, res) => {\r\n    //Add a new donation to our list\r\n    var poem = new Poem();\r\n\r\n    poem.title = req.body.title;\r\n    poem.author = req.body.author;\r\n\r\n    poem.save(function(err) {\r\n        if (err)\r\n            res.json({ message: \"Poem NOT Added!\", errmsg : err } );\r\n        else\r\n            res.json({ message: \"Poem Successfully Added!\", data: poem });\r\n    });\r\n};\r\n\r\n\r\nrouter.incrementLikes = (req, res) => {\r\n    Poem.findById(req.params.id, function(err,poem) {\r\n        if (err)\r\n            res.json({ message: \"Poem NOT Found!\", errmsg : err } );\r\n        else {\r\n            poem.likes.push(req.session.userId);\r\n            /*if(poem.find( { likes: req.session.userId} )){\r\n                res.json({ message: 'You have already liked this poem!', errmsg : err } );\r\n            }\r\n            else {\r\n                poem.likes.push(req.session.userId);\r\n                //record which poem user liked, but didn't work. So users don't know what poems they have liked\r\n                User.findById(req.session.userId, function(err,user){\r\n                    if (err)\r\n                        res.json({ message: 'User NOT Found!', errmsg : err } );\r\n                    else {\r\n                        user.likes.push(poem._id);\r\n                    }\r\n                })*/\r\n            poem.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Poem NOT liked!\", errmsg : err } );\r\n                else\r\n                    res.json({ message: \"Poem Successfully Liked!\", data: poem });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.decreaseLikes = (req, res) => {\r\n    Poem.findById(req.params.id, function(err,poem) {\r\n        if (err)\r\n            res.json({ message: \"Poem NOT Found!\", errmsg : err } );\r\n        else {\r\n            poem.likes.remove(req.session.userId);\r\n            poem.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Poem NOT liked!\", errmsg : err } );\r\n                else\r\n                    res.json({ message: \"Poem Successfully Unliked!\", data: poem });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.deletePoem = (req, res) => {\r\n    Poem.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"Poem NOT DELETED!\", errmsg : err } );\r\n        else\r\n            res.json({ message: \"Poem Successfully Deleted!\"});\r\n    });\r\n};\r\n\r\n/*\r\nfunction getTotalLikes(array) {\r\n    let totalLikes = 0;\r\n    array.forEach(function(obj) { totalLikes += obj.likes; });\r\n    return totalLikes;\r\n}\r\n\r\nrouter.findTotalLikes = (req, res) => {\r\n    Poem.find(function(err, poem) {\r\n        if (err)\r\n            res.send(err);\r\n        else\r\n            res.json({ totalLikes : getTotalLikes(poem) });\r\n    });\r\n}*/\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572964746826
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\\\\poems.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\models\\poems.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\models\\poems.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\models\\poems.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
        "sourceFileName": "poems.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('../routes/connectDB'); // mongoose.Promise = require('bluebird');\n\n\nlet Schema = mongoose.Schema;\nlet PoemSchema = new Schema({\n  title: String,\n  author: String,\n  likes: [{\n    type: Schema.Types.ObjectId,\n    ref: 'users'\n  }]\n}, {\n  collection: 'poetry'\n});\nvar Poem = mongoose.model('Poem', PoemSchema);\nmodule.exports = Poem;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvZW1zLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIlNjaGVtYSIsIlBvZW1TY2hlbWEiLCJ0aXRsZSIsIlN0cmluZyIsImF1dGhvciIsImxpa2VzIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJjb2xsZWN0aW9uIiwiUG9lbSIsIm1vZGVsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBdEIsQyxDQUNBOzs7QUFFQSxJQUFJQyxNQUFNLEdBQUdGLFFBQVEsQ0FBQ0UsTUFBdEI7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBSUQsTUFBSixDQUFXO0FBQ3BCRSxFQUFBQSxLQUFLLEVBQUVDLE1BRGE7QUFFcEJDLEVBQUFBLE1BQU0sRUFBRUQsTUFGWTtBQUdwQkUsRUFBQUEsS0FBSyxFQUFFLENBQUM7QUFBQ0MsSUFBQUEsSUFBSSxFQUFFTixNQUFNLENBQUNPLEtBQVAsQ0FBYUMsUUFBcEI7QUFBOEJDLElBQUFBLEdBQUcsRUFBRTtBQUFuQyxHQUFEO0FBSGEsQ0FBWCxFQUtiO0FBQUVDLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBTGEsQ0FBakI7QUFTQSxJQUFJQyxJQUFJLEdBQUdiLFFBQVEsQ0FBQ2MsS0FBVCxDQUFlLE1BQWYsRUFBdUJYLFVBQXZCLENBQVg7QUFDQVksTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxJQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcV2Vic3Rvcm1cXHBvZXRyeVdlYlxcbW9kZWxzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi4vcm91dGVzL2Nvbm5lY3REQicpO1xyXG4vLyBtb25nb29zZS5Qcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcclxuXHJcbmxldCBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XHJcbmxldCBQb2VtU2NoZW1hID0gbmV3IFNjaGVtYSh7XHJcbiAgICAgICAgdGl0bGU6IFN0cmluZyxcclxuICAgICAgICBhdXRob3I6IFN0cmluZyxcclxuICAgICAgICBsaWtlczogW3t0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ3VzZXJzJ31dXHJcbiAgICB9LFxyXG4gICAgeyBjb2xsZWN0aW9uOiAncG9ldHJ5J31cclxuKTtcclxuXHJcblxyXG52YXIgUG9lbSA9IG1vbmdvb3NlLm1vZGVsKCdQb2VtJywgUG9lbVNjaGVtYSk7XHJcbm1vZHVsZS5leHBvcnRzID0gUG9lbTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "poems.js"
      ],
      "names": [
        "mongoose",
        "require",
        "Schema",
        "PoemSchema",
        "title",
        "String",
        "author",
        "likes",
        "type",
        "Types",
        "ObjectId",
        "ref",
        "collection",
        "Poem",
        "model",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CACA;;;AAEA,IAAIC,MAAM,GAAGF,QAAQ,CAACE,MAAtB;AACA,IAAIC,UAAU,GAAG,IAAID,MAAJ,CAAW;AACpBE,EAAAA,KAAK,EAAEC,MADa;AAEpBC,EAAAA,MAAM,EAAED,MAFY;AAGpBE,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD;AAHa,CAAX,EAKb;AAAEC,EAAAA,UAAU,EAAE;AAAd,CALa,CAAjB;AASA,IAAIC,IAAI,GAAGb,QAAQ,CAACc,KAAT,CAAe,MAAf,EAAuBX,UAAvB,CAAX;AACAY,MAAM,CAACC,OAAP,GAAiBH,IAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "sourcesContent": [
        "let mongoose = require('../routes/connectDB');\r\n// mongoose.Promise = require('bluebird');\r\n\r\nlet Schema = mongoose.Schema;\r\nlet PoemSchema = new Schema({\r\n        title: String,\r\n        author: String,\r\n        likes: [{type: Schema.Types.ObjectId, ref: 'users'}]\r\n    },\r\n    { collection: 'poetry'}\r\n);\r\n\r\n\r\nvar Poem = mongoose.model('Poem', PoemSchema);\r\nmodule.exports = Poem;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572904998948
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\authors.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\authors.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\authors.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\authors.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "authors.js"
      }
    },
    "ast": null,
    "code": "let Author = require(\"../models/authors\");\n\nlet express = require(\"express\");\n\nlet router = express.Router();\n\nrouter.findAllAuthors = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Author.find(function (err, author) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(author, null, 5));\n  });\n};\n\nrouter.findOneAuthor = (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  Author.find({\n    \"_id\": req.params.id\n  }, function (err, author) {\n    if (err) res.json({\n      message: \"Author NOT Found!\",\n      errmsg: err\n    });else res.send(JSON.stringify(author, null, 5));\n  });\n};\n\nrouter.addAuthor = (req, res) => {\n  //Add a new donation to our list\n  var author = new Author();\n  author.name = req.body.name;\n  author.introduction = req.body.introduction;\n  author.save(function (err) {\n    if (err) res.json({\n      message: \"Author NOT Added!\",\n      errmsg: err\n    });else res.json({\n      message: \"Author Successfully Added!\",\n      data: author\n    });\n  });\n};\n/*\r\nrouter.incrementLikes = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.likes.push(req.session.userId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Author Successfully Liked!', data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.decreaseLikes = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.likes.remove(req.session.userId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Author Successfully Unliked!', data: author });\r\n            });\r\n        }\r\n    });\r\n};*/\n\n\nrouter.incrementWorks = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: \"Author NOT Found!\",\n      errmsg: err\n    });else {\n      author.works.push(req.body.poemId);\n      author.save(function (err) {\n        if (err) res.json({\n          message: \"Work NOT Added!\",\n          errmsg: err\n        });else res.json({\n          message: \"Work Successfully Added!\",\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.deleteWorks = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: \"Author NOT Found!\",\n      errmsg: err\n    });else {\n      author.works.remove(req.body.poemId);\n      author.save(function (err) {\n        if (err) res.json({\n          message: \"Author NOT liked!\",\n          errmsg: err\n        });else res.json({\n          message: \"Work Successfully deleted!\",\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.deleteAuthor = (req, res) => {\n  Author.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: \"Author NOT DELETED!\",\n      errmsg: err\n    });else res.json({\n      message: \"Author Successfully Deleted!\"\n    });\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "authors.js"
      ],
      "names": [
        "Author",
        "require",
        "express",
        "router",
        "Router",
        "findAllAuthors",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "author",
        "send",
        "JSON",
        "stringify",
        "findOneAuthor",
        "params",
        "id",
        "json",
        "message",
        "errmsg",
        "addAuthor",
        "name",
        "body",
        "introduction",
        "save",
        "data",
        "incrementWorks",
        "findById",
        "works",
        "push",
        "poemId",
        "deleteWorks",
        "remove",
        "deleteAuthor",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "let Author = require(\"../models/authors\");\r\nlet express = require(\"express\");\r\nlet router = express.Router();\r\n\r\nrouter.findAllAuthors = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader(\"Content-Type\", \"application/json\");\r\n    Author.find(function(err, author) {\r\n        if (err)\r\n            res.send(err);\r\n        res.send(JSON.stringify(author,null,5));\r\n    });\r\n};\r\n\r\nrouter.findOneAuthor = (req, res) => {\r\n    res.setHeader(\"Content-Type\",\"application/json\");\r\n\r\n    Author.find({ \"_id\" : req.params.id },function(err, author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } );\r\n        else\r\n            res.send(JSON.stringify(author,null,5));\r\n    });\r\n};\r\n\r\nrouter.addAuthor = (req, res) => {\r\n    //Add a new donation to our list\r\n    var author = new Author();\r\n\r\n    author.name = req.body.name;\r\n    author.introduction = req.body.introduction;\r\n\r\n    author.save(function(err) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Added!\", errmsg : err } );\r\n        else\r\n            res.json({ message: \"Author Successfully Added!\", data: author });\r\n    });\r\n};\r\n\r\n/*\r\nrouter.incrementLikes = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.likes.push(req.session.userId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Author Successfully Liked!', data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.decreaseLikes = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.likes.remove(req.session.userId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Author Successfully Unliked!', data: author });\r\n            });\r\n        }\r\n    });\r\n};*/\r\n\r\n\r\nrouter.incrementWorks = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } );\r\n        else {\r\n            author.works.push(req.body.poemId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Work NOT Added!\", errmsg : err } );\r\n                else\r\n                    res.json({ message: \"Work Successfully Added!\", data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.deleteWorks = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT Found!\", errmsg : err } );\r\n        else {\r\n            author.works.remove(req.body.poemId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: \"Author NOT liked!\", errmsg : err } );\r\n                else\r\n                    res.json({ message: \"Work Successfully deleted!\", data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.deleteAuthor = (req, res) => {\r\n    Author.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: \"Author NOT DELETED!\", errmsg : err } );\r\n        else\r\n            res.json({ message: \"Author Successfully Deleted!\"});\r\n    });\r\n};\r\n\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572964683307
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\\\\usersTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\usersTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\usersTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\usersTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
        "sourceFileName": "usersTest.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst server = require(\"../../../bin/www\");\n\nconst expect = chai.expect;\n\nconst request = require(\"supertest\");\n\nconst _ = require(\"lodash\");\n\nlet User = require(\"../../../models/users\");\n\nlet validID;\ndescribe(\"Users\", () => {\n  beforeEach(async () => {\n    try {\n      await User.deleteMany({});\n      let user = new User();\n      user.username = \"YeatsFans\";\n      user.email = \"LovYeats@lala.com\";\n      user.password = \"trytry123\";\n      user.gender = \"Male\";\n      await user.save();\n      user = new User();\n      user.username = \"DufuFans\";\n      user.email = \"LoveDF@haha.com\";\n      user.password = \"trytry345\";\n      user.gender = \"Female\";\n      await user.save();\n      user = await User.findOne({\n        username: \"YeatsFans\"\n      });\n      validID = user._id;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  describe(\"GET /users\", () => {\n    it(\"should return all the users\", done => {\n      request(server).get(\"/users\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n        try {\n          expect(res.body).to.be.a(\"array\");\n          expect(res.body.length).to.equal(2);\n\n          let result = _.map(res.body, user => {\n            return {\n              username: user.username\n            };\n          });\n\n          expect(result).to.deep.include({\n            username: \"YeatsFans\"\n          });\n          expect(result).to.deep.include({\n            username: \"DufuFans\"\n          });\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });\n  });\n  describe(\"GET /users/:id\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return the matching user\", done => {\n        request(server).get(`/users/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body[0]).to.have.property(\"username\", \"YeatsFans\");\n          done(err);\n        });\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return the NOT found message\", done => {\n        request(server).get(\"/users/9999\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body.message).equals(\"User NOT Found!\");\n          done(err);\n        });\n      });\n    });\n  });\n  describe(\"POST /users/login\", () => {\n    describe(\"when the logemail and logpassword are valid\", () => {\n      it(\"should return confirmation message and update datastore\", () => {\n        const user = {\n          logemail: \"LoveDF@haha.com\",\n          logpassword: \"trytry345\"\n        };\n        return request(server).post(\"/users/login\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"User Successfully Login!\");\n          validID = res.body.data;\n        });\n      });\n      after(() => {\n        return request(server).get(`/users/${validID}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"username\", \"DufuFans\");\n        });\n      });\n    });\n    describe(\"when the logemail is invalid\", () => {\n      it(\"should return information is wrong\", () => {\n        const user = {\n          logemail: \"LoveF@haha.com\",\n          logpassword: \"trytry345\"\n        };\n        return request(server).post(\"/users/login\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"Wrong email or password!\");\n        });\n      });\n    });\n    describe(\"when the logpassword is invalid\", () => {\n      it(\"should return information is wrong\", () => {\n        const user = {\n          logemail: \"LoveDF@haha.com\",\n          logpassword: \"try345\"\n        };\n        return request(server).post(\"/users/login\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"Wrong email or password!\");\n        });\n      });\n    });\n  });\n  describe(\"POST /usersRegister\", () => {\n    describe(\"when the all fields are filled and valid, password and passwordConf match\", () => {\n      it(\"should return the matching user\", () => {\n        const user = {\n          email: \"LoveWS@ho.com\",\n          username: \"WilliamShakespeareFan\",\n          password: \"trytry456\",\n          passwordConf: \"trytry456\",\n          gender: \"Female\"\n        };\n        return request(server).post(\"/usersRegister\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"User Successfully Added(Registered)!\");\n          validID = res.body.data._id;\n        });\n      });\n      after(() => {\n        return request(server).get(`/users/${validID}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"username\", \"WilliamShakespeareFan\");\n        });\n      });\n    });\n    describe(\"when the not all fields are filled\", () => {\n      it(\"should return the err message\", () => {\n        const user = {\n          email: \"LoveWS@ho.com\",\n          password: \"trytry456\",\n          passwordConf: \"trytry456\",\n          gender: \"Female\"\n        };\n        return request(server).post(\"/usersRegister\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"All fields required\");\n        });\n      });\n    });\n    describe(\"when the password and passwordConf dont match\", () => {\n      it(\"should return error message\", () => {\n        const user = {\n          email: \"LoveWS@ho.com\",\n          username: \"WilliamShakespeareFan\",\n          password: \"trytry456\",\n          passwordConf: \"trytr456\",\n          gender: \"Female\"\n        };\n        return request(server).post(\"/usersRegister\").send(user).expect(200).then(res => {\n          expect(res.body.message).equals(\"Passwords do not match.\");\n        });\n        /*.set(\"Accept\", \"application/json\")\r\n            .expect(\"Content-Type\", /json/)\r\n            .expect(200)\r\n            .end((err, res) => {\r\n                expect(res.body.message).equals(\"Passwords do not match.\");\r\n                done(err);\r\n            });*/\n      });\n    });\n  });\n  describe(\"DELETE /users\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return confirmation message and delete datastore\", () => {\n        return request(server).delete(`/users/${validID}`).expect(200).then(res => {\n          expect(res.body.message).equals(\"User Successfully Deleted!\");\n        });\n      });\n      after(() => {\n        return request(server).get(`/users/${validID}`).expect(200).expect([]);\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return confirmation message and delete datastore\", () => {\n        return request(server).delete(\"/donations/1100001\").expect(404).expect({});\n      });\n    });\n  });\n  describe(\"GET /usersLogout\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return the matching user\", done => {\n        request(server).get(\"/usersLogout\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body.message).equals(\"Successfully log out!\");\n          done(err);\n        });\n      });\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzVGVzdC5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsInNlcnZlciIsImV4cGVjdCIsInJlcXVlc3QiLCJfIiwiVXNlciIsInZhbGlkSUQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJkZWxldGVNYW55IiwidXNlciIsInVzZXJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImdlbmRlciIsInNhdmUiLCJmaW5kT25lIiwiX2lkIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiaXQiLCJkb25lIiwiZ2V0Iiwic2V0IiwiZW5kIiwiZXJyIiwicmVzIiwiYm9keSIsInRvIiwiYmUiLCJhIiwibGVuZ3RoIiwiZXF1YWwiLCJyZXN1bHQiLCJtYXAiLCJkZWVwIiwiaW5jbHVkZSIsImUiLCJoYXZlIiwicHJvcGVydHkiLCJtZXNzYWdlIiwiZXF1YWxzIiwibG9nZW1haWwiLCJsb2dwYXNzd29yZCIsInBvc3QiLCJzZW5kIiwidGhlbiIsImRhdGEiLCJhZnRlciIsInBhc3N3b3JkQ29uZiIsImRlbGV0ZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxrQkFBRCxDQUF0Qjs7QUFDQSxNQUFNRSxNQUFNLEdBQUdILElBQUksQ0FBQ0csTUFBcEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHSCxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNSSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQWpCOztBQUVBLElBQUlLLElBQUksR0FBR0wsT0FBTyxDQUFDLHVCQUFELENBQWxCOztBQUNBLElBQUlNLE9BQUo7QUFFQUMsUUFBUSxDQUFDLE9BQUQsRUFBVSxNQUFNO0FBQ3BCQyxFQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNuQixRQUFJO0FBQ0EsWUFBTUgsSUFBSSxDQUFDSSxVQUFMLENBQWdCLEVBQWhCLENBQU47QUFDQSxVQUFJQyxJ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WixFQUc0QixNQUg1QixFQUlLQSxNQUpMLENBSVksR0FKWixFQUtLdUIsR0FMTCxDQUtTLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2Z6QixVQUFBQSxNQUFNLENBQUN5QixHQUFHLENBQUNDLElBQUosQ0FBU2EsT0FBVixDQUFOLENBQXlCQyxNQUF6QixDQUFnQyx1QkFBaEM7QUFDQXBCLFVBQUFBLElBQUksQ0FBQ0ksR0FBRCxDQUFKO0FBQ0gsU0FSTDtBQVNILE9BVkMsQ0FBRjtBQVdILEtBWk8sQ0FBUjtBQWFILEdBZE8sQ0FBUjtBQWdCSCxDQXBQTyxDQUFSIiwic291cmNlUm9vdCI6IkQ6XFxXZWJzdG9ybVxccG9ldHJ5V2ViXFx0ZXN0XFxmdW5jdGlvbmFsXFxhcGkiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjaGFpID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmNvbnN0IHNlcnZlciA9IHJlcXVpcmUoXCIuLi8uLi8uLi9iaW4vd3d3XCIpO1xyXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcclxuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoXCJzdXBlcnRlc3RcIik7XHJcbmNvbnN0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5cclxubGV0IFVzZXIgPSByZXF1aXJlKFwiLi4vLi4vLi4vbW9kZWxzL3VzZXJzXCIpO1xyXG5sZXQgdmFsaWRJRDtcclxuXHJcbmRlc2NyaWJlKFwiVXNlcnNcIiwgKCkgPT4ge1xyXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgVXNlci5kZWxldGVNYW55KHt9KTtcclxuICAgICAgICAgICAgbGV0IHVzZXIgPSBuZXcgVXNlcigpO1xyXG4gICAgICAgICAgICB1c2VyLnVzZXJuYW1lID0gXCJZZWF0c0ZhbnNcIjtcclxuICAgICAgICAgICAgdXNlci5lbWFpbCA9IFwiTG92WWVhdHNAbGFsYS5jb21cIjtcclxuICAgICAgICAgICAgdXNlci5wYXNzd29yZD0gXCJ0cnl0cnkxMjNcIjtcclxuICAgICAgICAgICAgdXNlci5nZW5kZXI9XCJNYWxlXCI7XHJcbiAgICAgICAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgdXNlciA9IG5ldyBVc2VyKCk7XHJcbiAgICAgICAgICAgIHVzZXIudXNlcm5hbWUgPSBcIkR1ZnVGYW5zXCI7XHJcbiAgICAgICAgICAgIHVzZXIuZW1haWwgPSBcIkxvdmVERkBoYWhhLmNvbVwiO1xyXG4gICAgICAgICAgICB1c2VyLnBhc3N3b3JkPSBcInRyeXRyeTM0NVwiO1xyXG4gICAgICAgICAgICB1c2VyLmdlbmRlcj1cIkZlbWFsZVwiO1xyXG4gICAgICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoe3VzZXJuYW1lOlwiWWVhdHNGYW5zXCJ9KTtcclxuICAgICAgICAgICAgdmFsaWRJRCA9IHVzZXIuX2lkO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKFwiR0VUIC91c2Vyc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGFsbCB0aGUgdXNlcnNcIiwgZG9uZSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgLmdldChcIi91c2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgIC5leHBlY3QoXCJDb250ZW50LVR5cGVcIiwgL2pzb24vKVxyXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5KS50by5iZS5hKFwiYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5sZW5ndGgpLnRvLmVxdWFsKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gXy5tYXAocmVzLmJvZHksIHVzZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWV9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZGVlcC5pbmNsdWRlKHsgdXNlcm5hbWU6IFwiWWVhdHNGYW5zXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmRlZXAuaW5jbHVkZSh7IHVzZXJuYW1lOiBcIkR1ZnVGYW5zXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKFwiR0VUIC91c2Vycy86aWRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgaWQgaXMgdmFsaWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gdGhlIG1hdGNoaW5nIHVzZXJcIiwgZG9uZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAvdXNlcnMvJHt2YWxpZElEfWApXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KFwiQ29udGVudC1UeXBlXCIsIC9qc29uLylcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHlbMF0pLnRvLmhhdmUucHJvcGVydHkoXCJ1c2VybmFtZVwiLFwiWWVhdHNGYW5zXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgaWQgaXMgaW52YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHJldHVybiB0aGUgTk9UIGZvdW5kIG1lc3NhZ2VcIiwgZG9uZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0KFwiL3VzZXJzLzk5OTlcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0KFwiQWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoXCJDb250ZW50LVR5cGVcIiwgL2pzb24vKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5tZXNzYWdlKS5lcXVhbHMoXCJVc2VyIE5PVCBGb3VuZCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKFwiUE9TVCAvdXNlcnMvbG9naW5cIiwgKCkgPT4ge1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgbG9nZW1haWwgYW5kIGxvZ3Bhc3N3b3JkIGFyZSB2YWxpZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHJldHVybiBjb25maXJtYXRpb24gbWVzc2FnZSBhbmQgdXBkYXRlIGRhdGFzdG9yZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2VtYWlsIDpcIkxvdmVERkBoYWhhLmNvbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ3Bhc3N3b3JkOiBcInRyeXRyeTM0NVwiXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KFwiL3VzZXJzL2xvZ2luXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNlbmQodXNlcilcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkubWVzc2FnZSkuZXF1YWxzKFwiVXNlciBTdWNjZXNzZnVsbHkgTG9naW4hXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZElEID0gcmVzLmJvZHkuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFmdGVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0KGAvdXNlcnMvJHt2YWxpZElEfWApXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5WzBdKS50by5oYXZlLnByb3BlcnR5KFwidXNlcm5hbWVcIiwgXCJEdWZ1RmFuc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBsb2dlbWFpbCBpcyBpbnZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGluZm9ybWF0aW9uIGlzIHdyb25nXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZW1haWwgOlwiTG92ZUZAaGFoYS5jb21cIixcclxuICAgICAgICAgICAgICAgICAgICBsb2dwYXNzd29yZDogXCJ0cnl0cnkzNDVcIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAucG9zdChcIi91c2Vycy9sb2dpblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHVzZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLmVxdWFscyhcIldyb25nIGVtYWlsIG9yIHBhc3N3b3JkIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBsb2dwYXNzd29yZCBpcyBpbnZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGluZm9ybWF0aW9uIGlzIHdyb25nXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZW1haWwgOlwiTG92ZURGQGhhaGEuY29tXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9ncGFzc3dvcmQ6IFwidHJ5MzQ1XCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBvc3QoXCIvdXNlcnMvbG9naW5cIilcclxuICAgICAgICAgICAgICAgICAgICAuc2VuZCh1c2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5tZXNzYWdlKS5lcXVhbHMoXCJXcm9uZyBlbWFpbCBvciBwYXNzd29yZCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBkZXNjcmliZShcIlBPU1QgL3VzZXJzUmVnaXN0ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgYWxsIGZpZWxkcyBhcmUgZmlsbGVkIGFuZCB2YWxpZCwgcGFzc3dvcmQgYW5kIHBhc3N3b3JkQ29uZiBtYXRjaFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHJldHVybiB0aGUgbWF0Y2hpbmcgdXNlclwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsIDpcIkxvdmVXU0Boby5jb21cIixcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTpcIldpbGxpYW1TaGFrZXNwZWFyZUZhblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBcInRyeXRyeTQ1NlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkQ29uZjogXCJ0cnl0cnk0NTZcIixcclxuICAgICAgICAgICAgICAgICAgICBnZW5kZXI6IFwiRmVtYWxlXCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdChzZXJ2ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnBvc3QoXCIvdXNlcnNSZWdpc3RlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHVzZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLmVxdWFscyhcIlVzZXIgU3VjY2Vzc2Z1bGx5IEFkZGVkKFJlZ2lzdGVyZWQpIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRJRCA9IHJlcy5ib2R5LmRhdGEuX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYWZ0ZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYC91c2Vycy8ke3ZhbGlkSUR9YClcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHlbMF0pLnRvLmhhdmUucHJvcGVydHkoXCJ1c2VybmFtZVwiLCBcIldpbGxpYW1TaGFrZXNwZWFyZUZhblwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBub3QgYWxsIGZpZWxkcyBhcmUgZmlsbGVkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBlcnIgbWVzc2FnZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsIDpcIkxvdmVXU0Boby5jb21cIixcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogXCJ0cnl0cnk0NTZcIixcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZENvbmY6IFwidHJ5dHJ5NDU2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZGVyOiBcIkZlbWFsZVwiXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KFwiL3VzZXJzUmVnaXN0ZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2VuZCh1c2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5tZXNzYWdlKS5lcXVhbHMoXCJBbGwgZmllbGRzIHJlcXVpcmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBkZXNjcmliZShcIndoZW4gdGhlIHBhc3N3b3JkIGFuZCBwYXNzd29yZENvbmYgZG9udCBtYXRjaFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGl0KFwic2hvdWxkIHJldHVybiBlcnJvciBtZXNzYWdlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWwgOlwiTG92ZVdTQGhvLmNvbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOlwiV2lsbGlhbVNoYWtlc3BlYXJlRmFuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IFwidHJ5dHJ5NDU2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRDb25mOiBcInRyeXRyNDU2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZGVyOiBcIkZlbWFsZVwiXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KFwiL3VzZXJzUmVnaXN0ZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2VuZCh1c2VyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5tZXNzYWdlKS5lcXVhbHMoXCJQYXNzd29yZHMgZG8gbm90IG1hdGNoLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8qLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KFwiQ29udGVudC1UeXBlXCIsIC9qc29uLylcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkubWVzc2FnZSkuZXF1YWxzKFwiUGFzc3dvcmRzIGRvIG5vdCBtYXRjaC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsqL1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpYmUoXCJERUxFVEUgL3VzZXJzXCIsICgpID0+IHtcclxuICAgICAgICBkZXNjcmliZShcIndoZW4gdGhlIGlkIGlzIHZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGNvbmZpcm1hdGlvbiBtZXNzYWdlIGFuZCBkZWxldGUgZGF0YXN0b3JlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlKGAvdXNlcnMvJHt2YWxpZElEfWApXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5Lm1lc3NhZ2UpLmVxdWFscyhcIlVzZXIgU3VjY2Vzc2Z1bGx5IERlbGV0ZWQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYWZ0ZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoYC91c2Vycy8ke3ZhbGlkSUR9YClcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KFtdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVzY3JpYmUoXCJ3aGVuIHRoZSBpZCBpcyBpbnZhbGlkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGNvbmZpcm1hdGlvbiBtZXNzYWdlIGFuZCBkZWxldGUgZGF0YXN0b3JlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlKFwiL2RvbmF0aW9ucy8xMTAwMDAxXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCg0MDQpXHJcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCh7fSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBkZXNjcmliZShcIkdFVCAvdXNlcnNMb2dvdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGRlc2NyaWJlKFwid2hlbiB0aGUgaWQgaXMgdmFsaWRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gdGhlIG1hdGNoaW5nIHVzZXJcIiwgZG9uZSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0KHNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0KFwiL3VzZXJzTG9nb3V0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KFwiQ29udGVudC1UeXBlXCIsIC9qc29uLylcclxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcclxuICAgICAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QocmVzLmJvZHkubWVzc2FnZSkuZXF1YWxzKFwiU3VjY2Vzc2Z1bGx5IGxvZyBvdXQhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG59KTtcclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "usersTest.js"
      ],
      "names": [
        "chai",
        "require",
        "server",
        "expect",
        "request",
        "_",
        "User",
        "validID",
        "describe",
        "beforeEach",
        "deleteMany",
        "user",
        "username",
        "email",
        "password",
        "gender",
        "save",
        "findOne",
        "_id",
        "error",
        "console",
        "log",
        "it",
        "done",
        "get",
        "set",
        "end",
        "err",
        "res",
        "body",
        "to",
        "be",
        "a",
        "length",
        "equal",
        "result",
        "map",
        "deep",
        "include",
        "e",
        "have",
        "property",
        "message",
        "equals",
        "logemail",
        "logpassword",
        "post",
        "send",
        "then",
        "data",
        "after",
        "passwordConf",
        "delete"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "sourcesContent": [
        "const chai = require(\"chai\");\r\nconst server = require(\"../../../bin/www\");\r\nconst expect = chai.expect;\r\nconst request = require(\"supertest\");\r\nconst _ = require(\"lodash\");\r\n\r\nlet User = require(\"../../../models/users\");\r\nlet validID;\r\n\r\ndescribe(\"Users\", () => {\r\n    beforeEach(async () => {\r\n        try {\r\n            await User.deleteMany({});\r\n            let user = new User();\r\n            user.username = \"YeatsFans\";\r\n            user.email = \"LovYeats@lala.com\";\r\n            user.password= \"trytry123\";\r\n            user.gender=\"Male\";\r\n            await user.save();\r\n\r\n            user = new User();\r\n            user.username = \"DufuFans\";\r\n            user.email = \"LoveDF@haha.com\";\r\n            user.password= \"trytry345\";\r\n            user.gender=\"Female\";\r\n            await user.save();\r\n\r\n            user = await User.findOne({username:\"YeatsFans\"});\r\n            validID = user._id;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    });\r\n    describe(\"GET /users\", () => {\r\n        it(\"should return all the users\", done => {\r\n            request(server)\r\n                .get(\"/users\")\r\n                .set(\"Accept\", \"application/json\")\r\n                .expect(\"Content-Type\", /json/)\r\n                .expect(200)\r\n                .end((err, res) => {\r\n                    try{\r\n                        expect(res.body).to.be.a(\"array\");\r\n                        expect(res.body.length).to.equal(2);\r\n                        let result = _.map(res.body, user => {\r\n                            return { username: user.username};\r\n                        });\r\n                        expect(result).to.deep.include({ username: \"YeatsFans\" });\r\n                        expect(result).to.deep.include({ username: \"DufuFans\" });\r\n                        done();\r\n                    } catch (e) {\r\n                        done(e);\r\n                    }\r\n                });\r\n        });\r\n    });\r\n    describe(\"GET /users/:id\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return the matching user\", done => {\r\n                request(server)\r\n                    .get(`/users/${validID}`)\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body[0]).to.have.property(\"username\",\"YeatsFans\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return the NOT found message\", done => {\r\n                request(server)\r\n                    .get(\"/users/9999\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body.message).equals(\"User NOT Found!\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"POST /users/login\", () => {\r\n        describe(\"when the logemail and logpassword are valid\", () => {\r\n            it(\"should return confirmation message and update datastore\", () => {\r\n                const user = {\r\n                    logemail :\"LoveDF@haha.com\",\r\n                    logpassword: \"trytry345\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/users/login\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"User Successfully Login!\");\r\n                        validID = res.body.data;\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/users/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"username\", \"DufuFans\");\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the logemail is invalid\", () => {\r\n            it(\"should return information is wrong\", () => {\r\n                const user = {\r\n                    logemail :\"LoveF@haha.com\",\r\n                    logpassword: \"trytry345\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/users/login\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Wrong email or password!\");\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the logpassword is invalid\", () => {\r\n            it(\"should return information is wrong\", () => {\r\n                const user = {\r\n                    logemail :\"LoveDF@haha.com\",\r\n                    logpassword: \"try345\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/users/login\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Wrong email or password!\");\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"POST /usersRegister\", () => {\r\n        describe(\"when the all fields are filled and valid, password and passwordConf match\", () => {\r\n            it(\"should return the matching user\", () => {\r\n                const user = {\r\n                    email :\"LoveWS@ho.com\",\r\n                    username:\"WilliamShakespeareFan\",\r\n                    password: \"trytry456\",\r\n                    passwordConf: \"trytry456\",\r\n                    gender: \"Female\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/usersRegister\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"User Successfully Added(Registered)!\");\r\n                        validID = res.body.data._id;\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/users/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"username\", \"WilliamShakespeareFan\");\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the not all fields are filled\", () => {\r\n            it(\"should return the err message\", () => {\r\n                const user = {\r\n                    email :\"LoveWS@ho.com\",\r\n                    password: \"trytry456\",\r\n                    passwordConf: \"trytry456\",\r\n                    gender: \"Female\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/usersRegister\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"All fields required\");\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the password and passwordConf dont match\", () => {\r\n            it(\"should return error message\", () => {\r\n                const user = {\r\n                    email :\"LoveWS@ho.com\",\r\n                    username:\"WilliamShakespeareFan\",\r\n                    password: \"trytry456\",\r\n                    passwordConf: \"trytr456\",\r\n                    gender: \"Female\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/usersRegister\")\r\n                    .send(user)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Passwords do not match.\");\r\n                    });\r\n                /*.set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body.message).equals(\"Passwords do not match.\");\r\n                        done(err);\r\n                    });*/\r\n            });\r\n        });\r\n    });\r\n    describe(\"DELETE /users\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return confirmation message and delete datastore\", () => {\r\n                return request(server)\r\n                    .delete(`/users/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"User Successfully Deleted!\");\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/users/${validID}`)\r\n                    .expect(200)\r\n                    .expect([]);\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return confirmation message and delete datastore\", () => {\r\n                return request(server)\r\n                    .delete(\"/donations/1100001\")\r\n                    .expect(404)\r\n                    .expect({});\r\n            });\r\n        });\r\n    });\r\n    describe(\"GET /usersLogout\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return the matching user\", done => {\r\n                request(server)\r\n                    .get(\"/usersLogout\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body.message).equals(\"Successfully log out!\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n    });\r\n\r\n});\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572965289670
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\activitiesAfterLogin.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\activitiesAfterLogin.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\activitiesAfterLogin.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\activitiesAfterLogin.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test",
        "sourceFileName": "activitiesAfterLogin.js"
      }
    },
    "ast": null,
    "code": "/*\r\nvar expect = require('chai').expect;\r\nvar app = require('../app');\r\nvar request = require('supertest');\r\n\r\n//let's set up the data we need to pass to the login method\r\n    const userCredentials = {\r\n        email: 'sponge@bob.com',\r\n        password: 'garyTheSnail'\r\n    }\r\n//now let's login the user before we run any tests\r\nvar authenticatedUser = request.agent(app);\r\nbefore(function(done){\r\n    authenticatedUser\r\n        .post('/users/login')\r\n        .send(userCredentials)\r\n        .end(function(err, response){\r\n            expect(response.statusCode).to.equal(200);\r\n            done();\r\n        });\r\n});\r\n//this test says: make a POST to the /login route with the email: sponge@bob.com, password: garyTheSnail\r\n//after the POST has completed, make sure the status code is 200\r\n//also make sure that the user has been directed to the /home page\r\n\r\ndescribe('GET /profile', function(done){\r\n//addresses 1st bullet point: if the user is logged in we should get a 200 status code\r\n    it('should return a 200 response if the user is logged in', function(done){\r\n        authenticatedUser.get('/profile')\r\n            .expect(200, done);\r\n    });\r\n//addresses 2nd bullet point: if the user is not logged in we should get a 302 response code and be directed to the /login page\r\n    it('should return a 302 response and redirect to /login', function(done){\r\n        request(app).get('/profile')\r\n            .expect('Location', '/login')\r\n            .expect(302, done);\r\n    });\r\n});\r\n*/\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXRpZXNBZnRlckxvZ2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IkQ6XFxXZWJzdG9ybVxccG9ldHJ5V2ViXFx0ZXN0Iiwic291cmNlc0NvbnRlbnQiOlsiLypcclxudmFyIGV4cGVjdCA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3Q7XHJcbnZhciBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcclxudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcclxuXHJcbi8vbGV0J3Mgc2V0IHVwIHRoZSBkYXRhIHdlIG5lZWQgdG8gcGFzcyB0byB0aGUgbG9naW4gbWV0aG9kXHJcbiAgICBjb25zdCB1c2VyQ3JlZGVudGlhbHMgPSB7XHJcbiAgICAgICAgZW1haWw6ICdzcG9uZ2VAYm9iLmNvbScsXHJcbiAgICAgICAgcGFzc3dvcmQ6ICdnYXJ5VGhlU25haWwnXHJcbiAgICB9XHJcbi8vbm93IGxldCdzIGxvZ2luIHRoZSB1c2VyIGJlZm9yZSB3ZSBydW4gYW55IHRlc3RzXHJcbnZhciBhdXRoZW50aWNhdGVkVXNlciA9IHJlcXVlc3QuYWdlbnQoYXBwKTtcclxuYmVmb3JlKGZ1bmN0aW9uKGRvbmUpe1xyXG4gICAgYXV0aGVudGljYXRlZFVzZXJcclxuICAgICAgICAucG9zdCgnL3VzZXJzL2xvZ2luJylcclxuICAgICAgICAuc2VuZCh1c2VyQ3JlZGVudGlhbHMpXHJcbiAgICAgICAgLmVuZChmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvLmVxdWFsKDIwMCk7XHJcbiAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICB9KTtcclxufSk7XHJcbi8vdGhpcyB0ZXN0IHNheXM6IG1ha2UgYSBQT1NUIHRvIHRoZSAvbG9naW4gcm91dGUgd2l0aCB0aGUgZW1haWw6IHNwb25nZUBib2IuY29tLCBwYXNzd29yZDogZ2FyeVRoZVNuYWlsXHJcbi8vYWZ0ZXIgdGhlIFBPU1QgaGFzIGNvbXBsZXRlZCwgbWFrZSBzdXJlIHRoZSBzdGF0dXMgY29kZSBpcyAyMDBcclxuLy9hbHNvIG1ha2Ugc3VyZSB0aGF0IHRoZSB1c2VyIGhhcyBiZWVuIGRpcmVjdGVkIHRvIHRoZSAvaG9tZSBwYWdlXHJcblxyXG5kZXNjcmliZSgnR0VUIC9wcm9maWxlJywgZnVuY3Rpb24oZG9uZSl7XHJcbi8vYWRkcmVzc2VzIDFzdCBidWxsZXQgcG9pbnQ6IGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbiB3ZSBzaG91bGQgZ2V0IGEgMjAwIHN0YXR1cyBjb2RlXHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIDIwMCByZXNwb25zZSBpZiB0aGUgdXNlciBpcyBsb2dnZWQgaW4nLCBmdW5jdGlvbihkb25lKXtcclxuICAgICAgICBhdXRoZW50aWNhdGVkVXNlci5nZXQoJy9wcm9maWxlJylcclxuICAgICAgICAgICAgLmV4cGVjdCgyMDAsIGRvbmUpO1xyXG4gICAgfSk7XHJcbi8vYWRkcmVzc2VzIDJuZCBidWxsZXQgcG9pbnQ6IGlmIHRoZSB1c2VyIGlzIG5vdCBsb2dnZWQgaW4gd2Ugc2hvdWxkIGdldCBhIDMwMiByZXNwb25zZSBjb2RlIGFuZCBiZSBkaXJlY3RlZCB0byB0aGUgL2xvZ2luIHBhZ2VcclxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgMzAyIHJlc3BvbnNlIGFuZCByZWRpcmVjdCB0byAvbG9naW4nLCBmdW5jdGlvbihkb25lKXtcclxuICAgICAgICByZXF1ZXN0KGFwcCkuZ2V0KCcvcHJvZmlsZScpXHJcbiAgICAgICAgICAgIC5leHBlY3QoJ0xvY2F0aW9uJywgJy9sb2dpbicpXHJcbiAgICAgICAgICAgIC5leHBlY3QoMzAyLCBkb25lKTtcclxuICAgIH0pO1xyXG59KTtcclxuKi9cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "activitiesAfterLogin.js"
      ],
      "names": [],
      "mappings": "AAAA",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test",
      "sourcesContent": [
        "/*\r\nvar expect = require('chai').expect;\r\nvar app = require('../app');\r\nvar request = require('supertest');\r\n\r\n//let's set up the data we need to pass to the login method\r\n    const userCredentials = {\r\n        email: 'sponge@bob.com',\r\n        password: 'garyTheSnail'\r\n    }\r\n//now let's login the user before we run any tests\r\nvar authenticatedUser = request.agent(app);\r\nbefore(function(done){\r\n    authenticatedUser\r\n        .post('/users/login')\r\n        .send(userCredentials)\r\n        .end(function(err, response){\r\n            expect(response.statusCode).to.equal(200);\r\n            done();\r\n        });\r\n});\r\n//this test says: make a POST to the /login route with the email: sponge@bob.com, password: garyTheSnail\r\n//after the POST has completed, make sure the status code is 200\r\n//also make sure that the user has been directed to the /home page\r\n\r\ndescribe('GET /profile', function(done){\r\n//addresses 1st bullet point: if the user is logged in we should get a 200 status code\r\n    it('should return a 200 response if the user is logged in', function(done){\r\n        authenticatedUser.get('/profile')\r\n            .expect(200, done);\r\n    });\r\n//addresses 2nd bullet point: if the user is not logged in we should get a 302 response code and be directed to the /login page\r\n    it('should return a 302 response and redirect to /login', function(done){\r\n        request(app).get('/profile')\r\n            .expect('Location', '/login')\r\n            .expect(302, done);\r\n    });\r\n});\r\n*/\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572963337994
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\\\\poemsTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\poemsTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\poemsTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\poemsTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
        "sourceFileName": "poemsTest.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst server = require(\"../../../bin/www\");\n\nconst expect = chai.expect;\n\nconst request = require(\"supertest\");\n\nconst _ = require(\"lodash\");\n\nlet validID;\n\nlet Poem = require(\"../../../models/poems\");\n\ndescribe(\"Poems\", () => {\n  beforeEach(async () => {\n    try {\n      await Poem.deleteMany({});\n      let poem = new Poem();\n      poem.title = \"On children\";\n      poem.author = \"Kahlil Gibran\";\n      await poem.save();\n      poem = new Poem();\n      poem.title = \"MyPoem\";\n      poem.author = \"Xiaoming\";\n      await poem.save();\n      poem = await Poem.findOne({\n        author: \"Xiaoming\"\n      });\n      validID = poem._id;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  describe(\"GET /poems\", () => {\n    it(\"should return all the poems\", done => {\n      request(server).get(\"/poems\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n        try {\n          expect(res.body).to.be.a(\"array\");\n          expect(res.body.length).to.equal(2);\n\n          let result = _.map(res.body, poem => {\n            return {\n              title: poem.title\n            };\n          });\n\n          expect(result).to.deep.include({\n            title: \"On children\"\n          });\n          expect(result).to.deep.include({\n            title: \"MyPoem\"\n          });\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });\n  });\n  describe(\"GET /poems/:id\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return the matching poem\", done => {\n        request(server).get(`/poems/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body[0]).to.have.property(\"author\", \"Xiaoming\");\n          done(err);\n        });\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return the NOT found message\", done => {\n        request(server).get(\"/poems/9999\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body.message).equals(\"Poem NOT Found!\");\n          done(err);\n        });\n      });\n    });\n  });\n  describe(\"POST /poems/login\", () => {\n    describe(\"when the title and author are valid\", () => {\n      it(\"should return confirmation message and update datastore\", () => {\n        const poem = {\n          title: \"FirPoem\",\n          author: \"XiaoHong\"\n        };\n        return request(server).post(\"/poems\").send(poem).expect(200).then(res => {\n          expect(res.body.message).equals(\"Poem Successfully Added!\");\n          validID = res.body.data._id;\n        });\n      });\n      after(() => {\n        return request(server).get(`/poems/${validID}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"author\", \"XiaoHong\");\n        });\n      });\n    });\n    describe(\"when the author not provided\", () => {\n      it(\"should return confirmation message and update datastore\", () => {\n        const poem = {\n          title: \"FirstPoem\"\n        };\n        return request(server).post(\"/poems\").send(poem).expect(200).then(res => {\n          expect(res.body.message).equals(\"Poem Successfully Added!\");\n          validID = res.body.data._id;\n        });\n      });\n      after(() => {\n        return request(server).get(`/poems/${validID}`).expect(200).then(res => {\n          expect(res.body[0]).to.have.property(\"title\", \"FirstPoem\");\n        });\n      });\n    });\n  });\n  describe(\"DELETE /poems\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return confirmation message and delete datastore\", () => {\n        return request(server).delete(`/poems/${validID}`).expect(200).then(res => {\n          expect(res.body.message).equals(\"Poem Successfully Deleted!\");\n        });\n      });\n      after(() => {\n        return request(server).get(`/poems/${validID}`).expect(200).expect([]);\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return confirmation message and delete datastore\", () => {\n        return request(server).delete(\"/poems/1100001\").expect(200).then(res => {\n          expect(res.body.message).equals(\"Poem NOT DELETED!\");\n        });\n      });\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "poemsTest.js"
      ],
      "names": [
        "chai",
        "require",
        "server",
        "expect",
        "request",
        "_",
        "validID",
        "Poem",
        "describe",
        "beforeEach",
        "deleteMany",
        "poem",
        "title",
        "author",
        "save",
        "findOne",
        "_id",
        "error",
        "console",
        "log",
        "it",
        "done",
        "get",
        "set",
        "end",
        "err",
        "res",
        "body",
        "to",
        "be",
        "a",
        "length",
        "equal",
        "result",
        "map",
        "deep",
        "include",
        "e",
        "have",
        "property",
        "message",
        "equals",
        "post",
        "send",
        "then",
        "data",
        "after",
        "delete"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "sourcesContent": [
        "const chai = require(\"chai\");\r\nconst server = require(\"../../../bin/www\");\r\nconst expect = chai.expect;\r\nconst request = require(\"supertest\");\r\nconst _ = require(\"lodash\");\r\nlet validID;\r\nlet Poem = require(\"../../../models/poems\");\r\n\r\ndescribe(\"Poems\", () => {\r\n    beforeEach(async () => {\r\n        try {\r\n            await Poem.deleteMany({});\r\n            let poem = new Poem();\r\n            poem.title = \"On children\";\r\n            poem.author = \"Kahlil Gibran\";\r\n            await poem.save();\r\n\r\n            poem = new Poem();\r\n            poem.title = \"MyPoem\";\r\n            poem.author = \"Xiaoming\";\r\n            await poem.save();\r\n\r\n            poem = await Poem.findOne({author:\"Xiaoming\"});\r\n            validID = poem._id;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    });\r\n    describe(\"GET /poems\", () => {\r\n        it(\"should return all the poems\", done => {\r\n            request(server)\r\n                .get(\"/poems\")\r\n                .set(\"Accept\", \"application/json\")\r\n                .expect(\"Content-Type\", /json/)\r\n                .expect(200)\r\n                .end((err, res) => {\r\n                    try{\r\n                        expect(res.body).to.be.a(\"array\");\r\n                        expect(res.body.length).to.equal(2);\r\n                        let result = _.map(res.body, poem => {\r\n                            return { title: poem.title};\r\n                        });\r\n                        expect(result).to.deep.include({ title: \"On children\" });\r\n                        expect(result).to.deep.include({ title: \"MyPoem\" });\r\n                        done();\r\n                    } catch (e) {\r\n                        done(e);\r\n                    }\r\n                });\r\n        });\r\n    });\r\n    describe(\"GET /poems/:id\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return the matching poem\", done => {\r\n                request(server)\r\n                    .get(`/poems/${validID}`)\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body[0]).to.have.property(\"author\",\"Xiaoming\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return the NOT found message\", done => {\r\n                request(server)\r\n                    .get(\"/poems/9999\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body.message).equals(\"Poem NOT Found!\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"POST /poems/login\", () => {\r\n        describe(\"when the title and author are valid\", () => {\r\n            it(\"should return confirmation message and update datastore\", () => {\r\n                const poem = {\r\n                    title: \"FirPoem\",\r\n                    author: \"XiaoHong\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/poems\")\r\n                    .send(poem)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Poem Successfully Added!\");\r\n                        validID = res.body.data._id;\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/poems/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"author\", \"XiaoHong\");\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the author not provided\", () => {\r\n            it(\"should return confirmation message and update datastore\", () => {\r\n                const poem = {\r\n                    title: \"FirstPoem\"\r\n                };\r\n                return request(server)\r\n                    .post(\"/poems\")\r\n                    .send(poem)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Poem Successfully Added!\");\r\n                        validID = res.body.data._id;\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/poems/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body[0]).to.have.property(\"title\", \"FirstPoem\");\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"DELETE /poems\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return confirmation message and delete datastore\", () => {\r\n                return request(server)\r\n                    .delete(`/poems/${validID}`)\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Poem Successfully Deleted!\");\r\n                    });\r\n            });\r\n            after(() => {\r\n                return request(server)\r\n                    .get(`/poems/${validID}`)\r\n                    .expect(200)\r\n                    .expect([]);\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return confirmation message and delete datastore\", () => {\r\n                return request(server)\r\n                    .delete(\"/poems/1100001\")\r\n                    .expect(200)\r\n                    .then(res => {\r\n                        expect(res.body.message).equals(\"Poem NOT DELETED!\");\r\n                    });\r\n            });\r\n        });\r\n    });\r\n});\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572964890590
  }
}