{
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\\\\authorsTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\authorsTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\authorsTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\authorsTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
        "sourceFileName": "authorsTest.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst expect = chai.expect;\n\nconst request = require(\"supertest\");\n\nlet Author = require(\"../../../models/authors\");\n\nconst _ = require(\"lodash\");\n\nlet server = require(\"../../../bin/www\");\n\nlet mongod;\nlet db, validID;\ndescribe(\"Authors\", () => {\n  beforeEach(async () => {\n    try {\n      await Author.deleteMany({});\n      let author = new Author();\n      author.name = \"Yeats\";\n      author.introduction = \"Irish poet and one of the foremost figures of 20th-century literature. \" + \"A pillar of the Irish literary establishment, he helped to found the Abbey Theatre, \" + \"and in his later years served two terms as a Senator of the Irish Free State.\";\n      await author.save();\n      author = new Author();\n      author.name = \"Du Fu\";\n      author.introduction = \"Du Fu was a prominent Chinese poet of the Tang dynasty.\";\n      await author.save();\n      author = await Author.findOne({\n        name: \"Yeats\"\n      });\n      validID = author._id;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  describe(\"GET /authors\", () => {\n    it(\"should return all the authors\", done => {\n      request(server).get(\"/authors\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n        try {\n          expect(res.body).to.be.a(\"array\");\n          expect(res.body.length).to.equal(2);\n\n          let result = _.map(res.body, author => {\n            return {\n              name: author.name\n            };\n          });\n\n          expect(result).to.deep.include({\n            name: \"Yeats\"\n          });\n          expect(result).to.deep.include({\n            name: \"Du Fu\"\n          });\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });\n  });\n  describe(\"GET /authors/:id\", () => {\n    describe(\"when the id is valid\", () => {\n      it(\"should return the matching author\", done => {\n        request(server).get(`/authors/${validID}`).set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body[0]).to.have.property(\"name\", \"Yeats\");\n          done(err);\n        });\n      });\n    });\n    describe(\"when the id is invalid\", () => {\n      it(\"should return the NOT found message\", done => {\n        request(server).get(\"/authors/9999\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n          expect(res.body.message).equals(\"Author NOT Found!\");\n          done(err);\n        });\n      });\n    });\n  });\n  describe(\"POST /authors\", () => {\n    it(\"should return confirmation message and update datastore\", () => {\n      const author = {\n        name: \"Shakespeare\",\n        introduction: \"Great Great English play writer and poet\"\n      };\n      return request(server).post(\"/authors\").send(author).expect(200).then(res => {\n        expect(res.body.message).equals(\"Author Successfully Added!\");\n        validID = res.body.data._id;\n      });\n    });\n    after(() => {\n      return request(server).get(`/authors/${validID}`).expect(200).then(res => {\n        expect(res.body[0]).to.have.property(\"name\", \"Shakespeare\");\n        expect(res.body[0]).to.have.property(\"introduction\", \"Great Great English play writer and poet\");\n      });\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "authorsTest.js"
      ],
      "names": [
        "chai",
        "require",
        "expect",
        "request",
        "Author",
        "_",
        "server",
        "mongod",
        "db",
        "validID",
        "describe",
        "beforeEach",
        "deleteMany",
        "author",
        "name",
        "introduction",
        "save",
        "findOne",
        "_id",
        "error",
        "console",
        "log",
        "it",
        "done",
        "get",
        "set",
        "end",
        "err",
        "res",
        "body",
        "to",
        "be",
        "a",
        "length",
        "equal",
        "result",
        "map",
        "deep",
        "include",
        "e",
        "have",
        "property",
        "message",
        "equals",
        "post",
        "send",
        "then",
        "data",
        "after"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "sourcesContent": [
        "const chai = require(\"chai\");\r\nconst expect = chai.expect;\r\nconst request = require(\"supertest\");\r\nlet Author = require(\"../../../models/authors\");\r\n\r\nconst _ = require(\"lodash\");\r\nlet server = require(\"../../../bin/www\");\r\nlet mongod;\r\nlet db, validID;\r\ndescribe(\"Authors\", () => {\r\n    beforeEach(async () => {\r\n        try {\r\n            await Author.deleteMany({});\r\n            let author = new Author();\r\n            author.name = \"Yeats\";\r\n            author.introduction = \"Irish poet and one of the foremost figures of 20th-century literature. \" +\r\n            \"A pillar of the Irish literary establishment, he helped to found the Abbey Theatre, \" +\r\n            \"and in his later years served two terms as a Senator of the Irish Free State.\";\r\n            await author.save();\r\n\r\n            author = new Author();\r\n            author.name = \"Du Fu\";\r\n            author.introduction = \"Du Fu was a prominent Chinese poet of the Tang dynasty.\";\r\n            await author.save();\r\n\r\n            author = await Author.findOne({ name:\"Yeats\" });\r\n            validID = author._id;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    });\r\n\r\n    describe(\"GET /authors\", () => {\r\n        it(\"should return all the authors\", done => {\r\n            request(server)\r\n                .get(\"/authors\")\r\n                .set(\"Accept\", \"application/json\")\r\n                .expect(\"Content-Type\", /json/)\r\n                .expect(200)\r\n                .end((err, res) => {\r\n                    try{\r\n                        expect(res.body).to.be.a(\"array\");\r\n                        expect(res.body.length).to.equal(2);\r\n                        let result = _.map(res.body, author => {\r\n                            return { name: author.name};\r\n                        });\r\n                        expect(result).to.deep.include({ name: \"Yeats\" });\r\n                        expect(result).to.deep.include({ name: \"Du Fu\" });\r\n                        done();\r\n                    } catch (e) {\r\n                        done(e);\r\n                    }\r\n                });\r\n        });\r\n    });\r\n\r\n    describe(\"GET /authors/:id\", () => {\r\n        describe(\"when the id is valid\", () => {\r\n            it(\"should return the matching author\", done => {\r\n                request(server)\r\n                    .get(`/authors/${validID}`)\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body[0]).to.have.property(\"name\",\"Yeats\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n        describe(\"when the id is invalid\", () => {\r\n            it(\"should return the NOT found message\", done => {\r\n                request(server)\r\n                    .get(\"/authors/9999\")\r\n                    .set(\"Accept\", \"application/json\")\r\n                    .expect(\"Content-Type\", /json/)\r\n                    .expect(200)\r\n                    .end((err, res) => {\r\n                        expect(res.body.message).equals(\"Author NOT Found!\");\r\n                        done(err);\r\n                    });\r\n            });\r\n        });\r\n    });\r\n    describe(\"POST /authors\", () => {\r\n        it(\"should return confirmation message and update datastore\", () => {\r\n            const author = {\r\n                name:\"Shakespeare\",\r\n                introduction:\"Great Great English play writer and poet\"\r\n            };\r\n            return request(server)\r\n                .post(\"/authors\")\r\n                .send(author)\r\n                .expect(200)\r\n                .then(res => {\r\n                    expect(res.body.message).equals(\"Author Successfully Added!\");\r\n                    validID = res.body.data._id;\r\n                });\r\n        });\r\n        after(() => {\r\n            return request(server)\r\n                .get(`/authors/${validID}`)\r\n                .expect(200)\r\n                .then(res => {\r\n                    expect(res.body[0]).to.have.property(\"name\", \"Shakespeare\");\r\n                    expect(res.body[0]).to.have.property(\"introduction\",\"Great Great English play writer and poet\");\r\n                });\r\n        });\r\n    });\r\n\r\n});\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572879849227
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\\\\authors.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\models\\authors.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\models\\authors.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\models\\authors.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
        "sourceFileName": "authors.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('../routes/connectDB'); // mongoose.Promise = require('bluebird');\n\n\nlet Schema = mongoose.Schema;\nlet AuthorSchema = new Schema({\n  name: String,\n  introduction: String,\n  works: [{\n    type: Schema.Types.ObjectId,\n    ref: 'poems'\n  }],\n  likes: [{\n    type: Schema.Types.ObjectId,\n    ref: 'users'\n  }]\n}, {\n  collection: 'author'\n});\nvar Author = mongoose.model('Author', AuthorSchema);\nmodule.exports = Author;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhvcnMuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiU2NoZW1hIiwiQXV0aG9yU2NoZW1hIiwibmFtZSIsIlN0cmluZyIsImludHJvZHVjdGlvbiIsIndvcmtzIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJsaWtlcyIsImNvbGxlY3Rpb24iLCJBdXRob3IiLCJtb2RlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLHFCQUFELENBQXRCLEMsQ0FDQTs7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRixRQUFRLENBQUNFLE1BQXRCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLElBQUlELE1BQUosQ0FBVztBQUN0QkUsRUFBQUEsSUFBSSxFQUFFQyxNQURnQjtBQUV0QkMsRUFBQUEsWUFBWSxFQUFFRCxNQUZRO0FBR3RCRSxFQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUFDQyxJQUFBQSxJQUFJLEVBQUVOLE1BQU0sQ0FBQ08sS0FBUCxDQUFhQyxRQUFwQjtBQUE4QkMsSUFBQUEsR0FBRyxFQUFFO0FBQW5DLEdBQUQsQ0FIZTtBQUl0QkMsRUFBQUEsS0FBSyxFQUFFLENBQUM7QUFBQ0osSUFBQUEsSUFBSSxFQUFFTixNQUFNLENBQUNPLEtBQVAsQ0FBYUMsUUFBcEI7QUFBOEJDLElBQUFBLEdBQUcsRUFBRTtBQUFuQyxHQUFEO0FBSmUsQ0FBWCxFQU1mO0FBQUVFLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBTmUsQ0FBbkI7QUFXQSxJQUFJQyxNQUFNLEdBQUdkLFFBQVEsQ0FBQ2UsS0FBVCxDQUFlLFFBQWYsRUFBeUJaLFlBQXpCLENBQWI7QUFDQWEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxNQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcV2Vic3Rvcm1cXHBvZXRyeVdlYlxcbW9kZWxzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi4vcm91dGVzL2Nvbm5lY3REQicpO1xyXG4vLyBtb25nb29zZS5Qcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcclxuXHJcbmxldCBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XHJcbmxldCBBdXRob3JTY2hlbWEgPSBuZXcgU2NoZW1hKHtcclxuICAgICAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICAgICAgaW50cm9kdWN0aW9uOiBTdHJpbmcsXHJcbiAgICAgICAgd29ya3M6IFt7dHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdwb2Vtcyd9XSxcclxuICAgICAgICBsaWtlczogW3t0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ3VzZXJzJ31dXHJcbiAgICB9LFxyXG4gICAgeyBjb2xsZWN0aW9uOiAnYXV0aG9yJ31cclxuKTtcclxuXHJcblxyXG5cclxudmFyIEF1dGhvciA9IG1vbmdvb3NlLm1vZGVsKCdBdXRob3InLCBBdXRob3JTY2hlbWEpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhvcjtcclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "authors.js"
      ],
      "names": [
        "mongoose",
        "require",
        "Schema",
        "AuthorSchema",
        "name",
        "String",
        "introduction",
        "works",
        "type",
        "Types",
        "ObjectId",
        "ref",
        "likes",
        "collection",
        "Author",
        "model",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CACA;;;AAEA,IAAIC,MAAM,GAAGF,QAAQ,CAACE,MAAtB;AACA,IAAIC,YAAY,GAAG,IAAID,MAAJ,CAAW;AACtBE,EAAAA,IAAI,EAAEC,MADgB;AAEtBC,EAAAA,YAAY,EAAED,MAFQ;AAGtBE,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD,CAHe;AAItBC,EAAAA,KAAK,EAAE,CAAC;AAACJ,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD;AAJe,CAAX,EAMf;AAAEE,EAAAA,UAAU,EAAE;AAAd,CANe,CAAnB;AAWA,IAAIC,MAAM,GAAGd,QAAQ,CAACe,KAAT,CAAe,QAAf,EAAyBZ,YAAzB,CAAb;AACAa,MAAM,CAACC,OAAP,GAAiBH,MAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "sourcesContent": [
        "let mongoose = require('../routes/connectDB');\r\n// mongoose.Promise = require('bluebird');\r\n\r\nlet Schema = mongoose.Schema;\r\nlet AuthorSchema = new Schema({\r\n        name: String,\r\n        introduction: String,\r\n        works: [{type: Schema.Types.ObjectId, ref: 'poems'}],\r\n        likes: [{type: Schema.Types.ObjectId, ref: 'users'}]\r\n    },\r\n    { collection: 'author'}\r\n);\r\n\r\n\r\n\r\nvar Author = mongoose.model('Author', AuthorSchema);\r\nmodule.exports = Author;\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572830873514
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\connectDB.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\connectDB.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\connectDB.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\connectDB.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "connectDB.js"
      }
    },
    "ast": null,
    "code": "const mongoose = require('mongoose');\n\nlet username = \"YutingJing_24\";\nlet password = \"cindyJing97\";\nlet mongodbUri = \"mongodb+srv://\" + username + \":\" + password + \"@cluster0-evhrz.mongodb.net/artifactsdb\";\nmongoose.connect(mongodbUri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nvar db = mongoose.connection;\ndb.on('error', function (err) {\n  console.log('Unable to Connect to [ ' + db.name + ' ]', err);\n});\ndb.once('open', function () {\n  console.log('Successfully Connected to [ ' + db.name + ' ]');\n});\nmodule.exports = mongoose; // module.exports = db;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbm5lY3REQi5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibW9uZ29kYlVyaSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJkYiIsImNvbm5lY3Rpb24iLCJvbiIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJuYW1lIiwib25jZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7O0FBRUEsSUFBSUMsUUFBUSxHQUFHLGVBQWY7QUFDQSxJQUFJQyxRQUFRLEdBQUcsYUFBZjtBQUVBLElBQUlDLFVBQVUsR0FBQyxtQkFBaUJGLFFBQWpCLEdBQTRCLEdBQTVCLEdBQWtDQyxRQUFsQyxHQUE0Qyx5Q0FBM0Q7QUFFQUgsUUFBUSxDQUFDSyxPQUFULENBQWlCRCxVQUFqQixFQUE0QjtBQUFDRSxFQUFBQSxlQUFlLEVBQUUsSUFBbEI7QUFBd0JDLEVBQUFBLGtCQUFrQixFQUFFO0FBQTVDLENBQTVCO0FBRUEsSUFBSUMsRUFBRSxHQUFHUixRQUFRLENBQUNTLFVBQWxCO0FBRUFELEVBQUUsQ0FBQ0UsRUFBSCxDQUFNLE9BQU4sRUFBZSxVQUFVQyxHQUFWLEVBQWU7QUFDMUJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDRCQUE0QkwsRUFBRSxDQUFDTSxJQUEvQixHQUFzQyxJQUFsRCxFQUF3REgsR0FBeEQ7QUFDSCxDQUZEO0FBSUFILEVBQUUsQ0FBQ08sSUFBSCxDQUFRLE1BQVIsRUFBZ0IsWUFBWTtBQUN4QkgsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksaUNBQWlDTCxFQUFFLENBQUNNLElBQXBDLEdBQTJDLElBQXZEO0FBQ0gsQ0FGRDtBQUtBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixRQUFqQixDLENBQ0EiLCJzb3VyY2VSb290IjoiRDpcXFdlYnN0b3JtXFxwb2V0cnlXZWJcXHJvdXRlcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuXHJcbmxldCB1c2VybmFtZSA9IFwiWXV0aW5nSmluZ18yNFwiO1xyXG5sZXQgcGFzc3dvcmQgPSBcImNpbmR5SmluZzk3XCI7XHJcblxyXG5sZXQgbW9uZ29kYlVyaT1cIm1vbmdvZGIrc3J2Oi8vXCIrdXNlcm5hbWUgKyBcIjpcIiArIHBhc3N3b3JkICtcIkBjbHVzdGVyMC1ldmhyei5tb25nb2RiLm5ldC9hcnRpZmFjdHNkYlwiO1xyXG5cclxubW9uZ29vc2UuY29ubmVjdChtb25nb2RiVXJpLHt1c2VOZXdVcmxQYXJzZXI6IHRydWUsIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZX0pO1xyXG5cclxudmFyIGRiID0gbW9uZ29vc2UuY29ubmVjdGlvbjtcclxuXHJcbmRiLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgIGNvbnNvbGUubG9nKCdVbmFibGUgdG8gQ29ubmVjdCB0byBbICcgKyBkYi5uYW1lICsgJyBdJywgZXJyKTtcclxufSk7XHJcblxyXG5kYi5vbmNlKCdvcGVuJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBDb25uZWN0ZWQgdG8gWyAnICsgZGIubmFtZSArICcgXScpO1xyXG59KTtcclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlO1xyXG4vLyBtb2R1bGUuZXhwb3J0cyA9IGRiO1xyXG5cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "connectDB.js"
      ],
      "names": [
        "mongoose",
        "require",
        "username",
        "password",
        "mongodbUri",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "db",
        "connection",
        "on",
        "err",
        "console",
        "log",
        "name",
        "once",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAIC,QAAQ,GAAG,eAAf;AACA,IAAIC,QAAQ,GAAG,aAAf;AAEA,IAAIC,UAAU,GAAC,mBAAiBF,QAAjB,GAA4B,GAA5B,GAAkCC,QAAlC,GAA4C,yCAA3D;AAEAH,QAAQ,CAACK,OAAT,CAAiBD,UAAjB,EAA4B;AAACE,EAAAA,eAAe,EAAE,IAAlB;AAAwBC,EAAAA,kBAAkB,EAAE;AAA5C,CAA5B;AAEA,IAAIC,EAAE,GAAGR,QAAQ,CAACS,UAAlB;AAEAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAe,UAAUC,GAAV,EAAe;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BL,EAAE,CAACM,IAA/B,GAAsC,IAAlD,EAAwDH,GAAxD;AACH,CAFD;AAIAH,EAAE,CAACO,IAAH,CAAQ,MAAR,EAAgB,YAAY;AACxBH,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCL,EAAE,CAACM,IAApC,GAA2C,IAAvD;AACH,CAFD;AAKAE,MAAM,CAACC,OAAP,GAAiBjB,QAAjB,C,CACA",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "const mongoose = require('mongoose');\r\n\r\nlet username = \"YutingJing_24\";\r\nlet password = \"cindyJing97\";\r\n\r\nlet mongodbUri=\"mongodb+srv://\"+username + \":\" + password +\"@cluster0-evhrz.mongodb.net/artifactsdb\";\r\n\r\nmongoose.connect(mongodbUri,{useNewUrlParser: true, useUnifiedTopology: true});\r\n\r\nvar db = mongoose.connection;\r\n\r\ndb.on('error', function (err) {\r\n    console.log('Unable to Connect to [ ' + db.name + ' ]', err);\r\n});\r\n\r\ndb.once('open', function () {\r\n    console.log('Successfully Connected to [ ' + db.name + ' ]');\r\n});\r\n\r\n\r\nmodule.exports = mongoose;\r\n// module.exports = db;\r\n\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572830879155
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\app.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\app.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "var express = require('express');\n\nvar path = require('path');\n\nvar logger = require('morgan');\n\nvar cookieParser = require('cookie-parser');\n\nvar bodyParser = require('body-parser');\n\nvar session = require('express-session');\n\nvar MongoStore = require('connect-mongo')(session);\n\nlet db = require('./routes/connectDB').connection;\n\nvar createError = require('http-errors');\n\nvar indexRouter = require('./routes/index');\n\nconst users = require('./routes/users');\n\nconst poems = require(\"./routes/poems\");\n\nconst authors = require(\"./routes/authors\");\n\nvar app = express(); // view engine setup\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs'); //use sessions for tracking logins\n\napp.use(session({\n  secret: 'work hard',\n  resave: true,\n  saveUninitialized: false,\n  store: new MongoStore({\n    mongooseConnection: db\n  })\n}));\napp.use(logger('dev'));\n/*\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n*/\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\nif (process.env.NODE_ENV !== \"test\") {\n  app.use(logger(\"dev\"));\n}\n\napp.use('/', indexRouter);\napp.use('/users', users);\napp.get('/users', users.findAllUsers);\napp.get('/users/:id', users.findOneUser);\napp.get('/usersLogout', users.userLogout);\napp.post('/usersRegister', users.addAUser);\napp.post('/users/login', users.userLogin);\napp.delete('/users/:id', users.deleteUser);\napp.get('/poems', poems.findAllPoems);\napp.get('/poems/:id', poems.findOnePoem);\napp.post('/poems', poems.addPoem);\napp.put('/poems/:id/like', poems.incrementLikes);\napp.put('/poems/:id/unlike', poems.decreaseLikes);\napp.delete('/poems/:id', poems.deletePoem); // app.get('/poems/likes', poems.findTotalLikes);\n\napp.get('/authors', authors.findAllAuthors);\napp.get('/authors/:id', authors.findOneAuthor);\napp.post('/authors', authors.addAuthor);\napp.put('/authors/:id/like', authors.incrementLikes);\napp.put('/authors/:id/unlike', authors.decreaseLikes);\napp.put('/authors/:id/works', authors.incrementWorks);\napp.put('/authors/:id/deleteWork', authors.deleteWorks);\napp.delete('/authors/:id', authors.deleteAuthor); // catch 404 and forward to error handler\n\napp.use(function (req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n}); // error handlers\n// development error handler\n// will print stacktrace\n\nif (app.get('env') === 'development') {\n  app.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err\n    });\n  });\n} // production error handler\n// no stacktraces leaked to user\n\n\napp.use(function (err, req, res, next) {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\nmodule.exports = app;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "express",
        "require",
        "path",
        "logger",
        "cookieParser",
        "bodyParser",
        "session",
        "MongoStore",
        "db",
        "connection",
        "createError",
        "indexRouter",
        "users",
        "poems",
        "authors",
        "app",
        "set",
        "join",
        "__dirname",
        "use",
        "secret",
        "resave",
        "saveUninitialized",
        "store",
        "mongooseConnection",
        "json",
        "urlencoded",
        "extended",
        "static",
        "process",
        "env",
        "NODE_ENV",
        "get",
        "findAllUsers",
        "findOneUser",
        "userLogout",
        "post",
        "addAUser",
        "userLogin",
        "delete",
        "deleteUser",
        "findAllPoems",
        "findOnePoem",
        "addPoem",
        "put",
        "incrementLikes",
        "decreaseLikes",
        "deletePoem",
        "findAllAuthors",
        "findOneAuthor",
        "addAuthor",
        "incrementWorks",
        "deleteWorks",
        "deleteAuthor",
        "req",
        "res",
        "next",
        "err",
        "Error",
        "status",
        "render",
        "message",
        "error",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIM,UAAU,GAAGN,OAAO,CAAC,eAAD,CAAP,CAAyBK,OAAzB,CAAjB;;AACA,IAAIE,EAAE,GAAGP,OAAO,CAAC,oBAAD,CAAP,CAA8BQ,UAAvC;;AACA,IAAIC,WAAW,GAAGT,OAAO,CAAC,aAAD,CAAzB;;AAEA,IAAIU,WAAW,GAAGV,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMW,KAAK,GAAGX,OAAO,CAAC,gBAAD,CAArB;;AACA,MAAMY,KAAK,GAAGZ,OAAO,CAAC,gBAAD,CAArB;;AACA,MAAMa,OAAO,GAAGb,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAIc,GAAG,GAAGf,OAAO,EAAjB,C,CAEA;;AACAe,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBd,IAAI,CAACe,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAH,GAAG,CAACC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB,E,CAEA;;AACAD,GAAG,CAACI,GAAJ,CAAQb,OAAO,CAAC;AACZc,EAAAA,MAAM,EAAE,WADI;AAEZC,EAAAA,MAAM,EAAE,IAFI;AAGZC,EAAAA,iBAAiB,EAAE,KAHP;AAIZC,EAAAA,KAAK,EAAE,IAAIhB,UAAJ,CAAe;AAClBiB,IAAAA,kBAAkB,EAAEhB;AADF,GAAf;AAJK,CAAD,CAAf;AASAO,GAAG,CAACI,GAAJ,CAAQhB,MAAM,CAAC,KAAD,CAAd;AACA;;;;;;;AAOAY,GAAG,CAACI,GAAJ,CAAQd,UAAU,CAACoB,IAAX,EAAR;AACAV,GAAG,CAACI,GAAJ,CAAQd,UAAU,CAACqB,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAZ,GAAG,CAACI,GAAJ,CAAQf,YAAY,EAApB;AACAW,GAAG,CAACI,GAAJ,CAAQnB,OAAO,CAAC4B,MAAR,CAAe1B,IAAI,CAACe,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AACA,IAAIW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACjChB,EAAAA,GAAG,CAACI,GAAJ,CAAQhB,MAAM,CAAC,KAAD,CAAd;AACH;;AAEDY,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAaR,WAAb;AACAI,GAAG,CAACI,GAAJ,CAAQ,QAAR,EAAkBP,KAAlB;AAEAG,GAAG,CAACiB,GAAJ,CAAQ,QAAR,EAAkBpB,KAAK,CAACqB,YAAxB;AACAlB,GAAG,CAACiB,GAAJ,CAAQ,YAAR,EAAsBpB,KAAK,CAACsB,WAA5B;AACAnB,GAAG,CAACiB,GAAJ,CAAQ,cAAR,EAAuBpB,KAAK,CAACuB,UAA7B;AACApB,GAAG,CAACqB,IAAJ,CAAS,gBAAT,EAA0BxB,KAAK,CAACyB,QAAhC;AACAtB,GAAG,CAACqB,IAAJ,CAAS,cAAT,EAAwBxB,KAAK,CAAC0B,SAA9B;AACAvB,GAAG,CAACwB,MAAJ,CAAW,YAAX,EAAyB3B,KAAK,CAAC4B,UAA/B;AAEAzB,GAAG,CAACiB,GAAJ,CAAQ,QAAR,EAAkBnB,KAAK,CAAC4B,YAAxB;AACA1B,GAAG,CAACiB,GAAJ,CAAQ,YAAR,EAAsBnB,KAAK,CAAC6B,WAA5B;AACA3B,GAAG,CAACqB,IAAJ,CAAS,QAAT,EAAkBvB,KAAK,CAAC8B,OAAxB;AACA5B,GAAG,CAAC6B,GAAJ,CAAQ,iBAAR,EAA2B/B,KAAK,CAACgC,cAAjC;AACA9B,GAAG,CAAC6B,GAAJ,CAAQ,mBAAR,EAA4B/B,KAAK,CAACiC,aAAlC;AACA/B,GAAG,CAACwB,MAAJ,CAAW,YAAX,EAAyB1B,KAAK,CAACkC,UAA/B,E,CACA;;AAEAhC,GAAG,CAACiB,GAAJ,CAAQ,UAAR,EAAoBlB,OAAO,CAACkC,cAA5B;AACAjC,GAAG,CAACiB,GAAJ,CAAQ,cAAR,EAAwBlB,OAAO,CAACmC,aAAhC;AACAlC,GAAG,CAACqB,IAAJ,CAAS,UAAT,EAAoBtB,OAAO,CAACoC,SAA5B;AACAnC,GAAG,CAAC6B,GAAJ,CAAQ,mBAAR,EAA4B9B,OAAO,CAAC+B,cAApC;AACA9B,GAAG,CAAC6B,GAAJ,CAAQ,qBAAR,EAA8B9B,OAAO,CAACgC,aAAtC;AACA/B,GAAG,CAAC6B,GAAJ,CAAQ,oBAAR,EAA6B9B,OAAO,CAACqC,cAArC;AACApC,GAAG,CAAC6B,GAAJ,CAAQ,yBAAR,EAAkC9B,OAAO,CAACsC,WAA1C;AACArC,GAAG,CAACwB,MAAJ,CAAW,cAAX,EAA2BzB,OAAO,CAACuC,YAAnC,E,CAIA;;AACAtC,GAAG,CAACI,GAAJ,CAAQ,UAASmC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC7B,MAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,EAAAA,GAAG,CAACE,MAAJ,GAAa,GAAb;AACAH,EAAAA,IAAI,CAACC,GAAD,CAAJ;AACH,CAJD,E,CAMA;AAEA;AACA;;AACA,IAAI1C,GAAG,CAACiB,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AAClCjB,EAAAA,GAAG,CAACI,GAAJ,CAAQ,UAASsC,GAAT,EAAcH,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAClCD,IAAAA,GAAG,CAACI,MAAJ,CAAWF,GAAG,CAACE,MAAJ,IAAc,GAAzB;AACAJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,OAAX,EAAoB;AAChBC,MAAAA,OAAO,EAAEJ,GAAG,CAACI,OADG;AAEhBC,MAAAA,KAAK,EAAEL;AAFS,KAApB;AAIH,GAND;AAOH,C,CAED;AACA;;;AACA1C,GAAG,CAACI,GAAJ,CAAQ,UAASsC,GAAT,EAAcH,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAClCD,EAAAA,GAAG,CAACI,MAAJ,CAAWF,GAAG,CAACE,MAAJ,IAAc,GAAzB;AACAJ,EAAAA,GAAG,CAACK,MAAJ,CAAW,OAAX,EAAoB;AAChBC,IAAAA,OAAO,EAAEJ,GAAG,CAACI,OADG;AAEhBC,IAAAA,KAAK,EAAE;AAFS,GAApB;AAIH,CAND;AASAC,MAAM,CAACC,OAAP,GAAiBjD,GAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb",
      "sourcesContent": [
        "var express = require('express');\r\nvar path = require('path');\r\nvar logger = require('morgan');\r\nvar cookieParser = require('cookie-parser');\r\nvar bodyParser = require('body-parser');\r\nvar session = require('express-session');\r\nvar MongoStore = require('connect-mongo')(session);\r\nlet db = require('./routes/connectDB').connection;\r\nvar createError = require('http-errors');\r\n\r\nvar indexRouter = require('./routes/index');\r\nconst users = require('./routes/users');\r\nconst poems = require(\"./routes/poems\");\r\nconst authors = require(\"./routes/authors\");\r\n\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'ejs');\r\n\r\n//use sessions for tracking logins\r\napp.use(session({\r\n    secret: 'work hard',\r\n    resave: true,\r\n    saveUninitialized: false,\r\n    store: new MongoStore({\r\n        mongooseConnection: db\r\n    })\r\n}));\r\n\r\napp.use(logger('dev'));\r\n/*\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n*/\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\nif (process.env.NODE_ENV !== \"test\") {\r\n    app.use(logger(\"dev\"))\r\n}\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', users);\r\n\r\napp.get('/users', users.findAllUsers);\r\napp.get('/users/:id', users.findOneUser);\r\napp.get('/usersLogout',users.userLogout);\r\napp.post('/usersRegister',users.addAUser);\r\napp.post('/users/login',users.userLogin);\r\napp.delete('/users/:id', users.deleteUser);\r\n\r\napp.get('/poems', poems.findAllPoems);\r\napp.get('/poems/:id', poems.findOnePoem)\r\napp.post('/poems',poems.addPoem);\r\napp.put('/poems/:id/like', poems.incrementLikes);\r\napp.put('/poems/:id/unlike',poems.decreaseLikes);\r\napp.delete('/poems/:id', poems.deletePoem);\r\n// app.get('/poems/likes', poems.findTotalLikes);\r\n\r\napp.get('/authors', authors.findAllAuthors);\r\napp.get('/authors/:id', authors.findOneAuthor);\r\napp.post('/authors',authors.addAuthor);\r\napp.put('/authors/:id/like',authors.incrementLikes);\r\napp.put('/authors/:id/unlike',authors.decreaseLikes);\r\napp.put('/authors/:id/works',authors.incrementWorks);\r\napp.put('/authors/:id/deleteWork',authors.deleteWorks);\r\napp.delete('/authors/:id', authors.deleteAuthor);\r\n\r\n\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n    var err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\n// error handlers\r\n\r\n// development error handler\r\n// will print stacktrace\r\nif (app.get('env') === 'development') {\r\n    app.use(function(err, req, res, next) {\r\n        res.status(err.status || 500);\r\n        res.render('error', {\r\n            message: err.message,\r\n            error: err\r\n        });\r\n    });\r\n}\r\n\r\n// production error handler\r\n// no stacktraces leaked to user\r\napp.use(function(err, req, res, next) {\r\n    res.status(err.status || 500);\r\n    res.render('error', {\r\n        message: err.message,\r\n        error: {}\r\n    });\r\n});\r\n\r\n\r\nmodule.exports = app;\r\n\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572830873511
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "var express = require('express');\n\nvar router = express.Router();\n/* GET home page. */\n\nrouter.get('/', function (req, res, next) {\n  res.render('index', {\n    title: 'Daily Poem Recommendation'\n  });\n});\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsInJlbmRlciIsInRpdGxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0csTUFBUixFQUFiO0FBRUE7O0FBQ0FELE1BQU0sQ0FBQ0UsR0FBUCxDQUFXLEdBQVgsRUFBZ0IsVUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CQyxJQUFuQixFQUF5QjtBQUN2Q0QsRUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsT0FBWCxFQUFvQjtBQUFFQyxJQUFBQSxLQUFLLEVBQUU7QUFBVCxHQUFwQjtBQUNELENBRkQ7QUFJQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVCxNQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcV2Vic3Rvcm1cXHBvZXRyeVdlYlxccm91dGVzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG52YXIgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLyogR0VUIGhvbWUgcGFnZS4gKi9cbnJvdXRlci5nZXQoJy8nLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICByZXMucmVuZGVyKCdpbmRleCcsIHsgdGl0bGU6ICdEYWlseSBQb2VtIFJlY29tbWVuZGF0aW9uJyB9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "get",
        "req",
        "res",
        "next",
        "render",
        "title",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;AAEA;;AACAD,MAAM,CAACE,GAAP,CAAW,GAAX,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACvCD,EAAAA,GAAG,CAACE,MAAJ,CAAW,OAAX,EAAoB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApB;AACD,CAFD;AAIAC,MAAM,CAACC,OAAP,GAAiBT,MAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "var express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Daily Poem Recommendation' });\n});\n\nmodule.exports = router;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1571738737745
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\users.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\users.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\users.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\users.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "users.js"
      }
    },
    "ast": null,
    "code": "let User = require(\"../models/users\");\n\nlet express = require('express');\n\nlet router = express.Router();\n/* GET users listing. */\n\n/*router.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});*/\n\nrouter.findAllUsers = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader('Content-Type', 'application/json'); // res.send(JSON.stringify(poems,null,5));\n\n  User.find(function (err, users) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(users, null, 5));\n  });\n};\n\nfunction getByValue(array, id) {\n  var result = array.filter(function (obj) {\n    return obj.id == id;\n  });\n  return result ? result[0] : null; // or undefined\n}\n\nrouter.findOneUser = (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  User.find({\n    \"_id\": req.params.id\n  }, function (err, user) {\n    if (err) res.json({\n      message: 'User NOT Found!',\n      errmsg: err\n    });else res.send(JSON.stringify(user, null, 5));\n  });\n};\n\nrouter.addAUser = (req, res) => {\n  // confirm that user typed same password twice\n  if (req.body.password !== req.body.passwordConf) {\n    var err = new Error('Passwords do not match.');\n    err.status = 400;\n    res.send(\"passwords dont match\");\n    return next(err);\n  } // If the email hasn't been registered\n  //Add a new user to our list if all the fields are filled (Register)\n\n\n  if (req.body.email && req.body.username && req.body.password && req.body.passwordConf) {\n    var user = new User();\n    user.username = req.body.username;\n    user.email = req.body.email;\n    user.password = req.body.password;\n    user.gender = req.body.gender;\n    user.save(function (err) {\n      if (err) res.json({\n        message: 'User NOT Added!',\n        errmsg: err\n      });else {\n        req.session.userId = user._id;\n        res.json({\n          message: 'User Successfully Added(Registered)!',\n          data: user\n        }); // return res.redi ('/profile');\n      }\n    });\n  } else {\n    res.json({\n      message: 'All fields required'\n    }); // var err = new Error('All fields required.');\n    // err.status = 400;\n    // return next(err);\n  }\n}; // GET users/login\n\n\nrouter.userLogin = (req, res) => {\n  if (req.body.logemail && req.body.logpassword) {\n    User.authenticate(req.body.logemail, req.body.logpassword, function (error, user) {\n      if (error || !user) {\n        res.json({\n          message: 'Wrong email or password!'\n        }); // var err = new Error('Wrong email or password.');\n        // err.status = 401;\n        // return next(err);\n      } else {\n        req.session.userId = user._id;\n        res.json({\n          message: req.session,\n          data: user\n        }); // return res.redi ('/profile');\n      }\n    });\n  }\n}; // GET users/logout\n\n\nrouter.userLogout = (req, res, next) => {\n  if (req.session) {\n    // delete session object\n    req.session.destroy(function (err) {\n      if (err) {\n        return next(err);\n      } else {\n        // return res.redirect('/');\n        res.json({\n          message: \"Successfully log out!\",\n          data: req.session\n        });\n      }\n    });\n  }\n};\n\nrouter.deleteUser = (req, res) => {\n  User.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: 'User NOT DELETED!',\n      errmsg: err\n    });else res.json({\n      message: 'User Successfully Deleted!'\n    });\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "users.js"
      ],
      "names": [
        "User",
        "require",
        "express",
        "router",
        "Router",
        "findAllUsers",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "users",
        "send",
        "JSON",
        "stringify",
        "getByValue",
        "array",
        "id",
        "result",
        "filter",
        "obj",
        "findOneUser",
        "params",
        "user",
        "json",
        "message",
        "errmsg",
        "addAUser",
        "body",
        "password",
        "passwordConf",
        "Error",
        "status",
        "next",
        "email",
        "username",
        "gender",
        "save",
        "session",
        "userId",
        "_id",
        "data",
        "userLogin",
        "logemail",
        "logpassword",
        "authenticate",
        "error",
        "userLogout",
        "destroy",
        "deleteUser",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "let User = require(\"../models/users\");\nlet express = require('express');\nlet router = express.Router();\n\n/* GET users listing. */\n/*router.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});*/\n\n\nrouter.findAllUsers = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader('Content-Type', 'application/json');\n  // res.send(JSON.stringify(poems,null,5));\n  User.find(function(err, users) {\n    if (err)\n      res.send(err);\n    res.send(JSON.stringify(users,null,5));\n  });\n};\n\nfunction getByValue(array, id) {\n  var result  = array.filter(function(obj){return obj.id == id;} );\n  return result ? result[0] : null; // or undefined\n}\n\nrouter.findOneUser = (req, res) => {\n  res.setHeader('Content-Type','application/json');\n  User.find({ \"_id\" : req.params.id },function(err, user) {\n    if (err)\n      res.json({ message: 'User NOT Found!', errmsg : err } );\n    else\n      res.send(JSON.stringify(user,null,5));\n  });\n}\n\nrouter.addAUser = (req, res) => {\n    // confirm that user typed same password twice\n    if (req.body.password !== req.body.passwordConf) {\n        var err = new Error('Passwords do not match.');\n        err.status = 400;\n        res.send(\"passwords dont match\");\n        return next(err);\n    }\n    // If the email hasn't been registered\n    //Add a new user to our list if all the fields are filled (Register)\n    if(req.body.email && req.body.username && req.body.password && req.body.passwordConf) {\n        var user = new User();\n        user.username = req.body.username;\n        user.email = req.body.email;\n        user.password = req.body.password;\n        user.gender = req.body.gender;\n\n        user.save(function (err) {\n            if (err)\n                res.json({message: 'User NOT Added!', errmsg: err});\n            else {\n                req.session.userId = user._id;\n                res.json({message: 'User Successfully Added(Registered)!', data: user});\n                // return res.redi ('/profile');\n            }\n        })\n    }\n    else {\n        res.json({message: 'All fields required'});\n        // var err = new Error('All fields required.');\n        // err.status = 400;\n        // return next(err);\n    }\n};\n\n// GET users/login\nrouter.userLogin = (req, res) => {\n    if (req.body.logemail && req.body.logpassword) {\n        User.authenticate(req.body.logemail, req.body.logpassword, function (error, user) {\n            if (error || !user) {\n                res.json({message: 'Wrong email or password!'})\n                // var err = new Error('Wrong email or password.');\n                // err.status = 401;\n                // return next(err);\n            } else {\n                req.session.userId = user._id;\n                res.json({message: req.session, data: user});\n                // return res.redi ('/profile');\n            }\n        });\n    }\n}\n\n// GET users/logout\nrouter.userLogout = (req, res, next) => {\n    if (req.session) {\n        // delete session object\n        req.session.destroy(function(err) {\n            if(err) {\n                return next(err);\n            } else {\n                // return res.redirect('/');\n                res.json({message: \"Successfully log out!\", data:req.session});\n            }\n        });\n    }\n};\n\nrouter.deleteUser = (req, res) => {\n  User.findByIdAndRemove(req.params.id, function(err) {\n    if (err)\n      res.json({ message: 'User NOT DELETED!', errmsg : err } );\n    else\n      res.json({ message: 'User Successfully Deleted!'});\n  });\n};\n\nmodule.exports = router;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572198971381
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\\\\users.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\models\\users.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\models\\users.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\models\\users.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
        "sourceFileName": "users.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('../routes/connectDB');\n\nvar bcrypt = require('bcrypt');\n\nlet Schema = mongoose.Schema;\nlet UserSchema = new Schema({\n  username: {\n    type: String,\n    unique: true,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  gender: String,\n  likes: [{\n    type: Schema.Types.ObjectId,\n    ref: 'poems'\n  }]\n}, {\n  collection: 'users'\n}); //authenticate input against database\n\nUserSchema.statics.authenticate = function (email, password, callback) {\n  User.findOne({\n    email: email\n  }).exec(function (err, user) {\n    if (err) {\n      return callback(err);\n    } else if (!user) {\n      var err = new Error('User not found.');\n      err.status = 401;\n      return callback(err);\n    }\n\n    bcrypt.compare(password, user.password, function (err, result) {\n      if (result === true) {\n        return callback(null, user);\n      } else {\n        return callback();\n      }\n    });\n  });\n}; //hashing a password before saving it to the database\n\n\nUserSchema.pre('save', function (next) {\n  var user = this;\n  bcrypt.hash(user.password, 10, function (err, hash) {\n    if (err) {\n      return next(err);\n    }\n\n    user.password = hash;\n    next();\n  });\n});\nvar User = mongoose.model('User', UserSchema);\nmodule.exports = User;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsImJjcnlwdCIsIlNjaGVtYSIsIlVzZXJTY2hlbWEiLCJ1c2VybmFtZSIsInR5cGUiLCJTdHJpbmciLCJ1bmlxdWUiLCJyZXF1aXJlZCIsInRyaW0iLCJlbWFpbCIsInBhc3N3b3JkIiwiZ2VuZGVyIiwibGlrZXMiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiY29sbGVjdGlvbiIsInN0YXRpY3MiLCJhdXRoZW50aWNhdGUiLCJjYWxsYmFjayIsIlVzZXIiLCJmaW5kT25lIiwiZXhlYyIsImVyciIsInVzZXIiLCJFcnJvciIsInN0YXR1cyIsImNvbXBhcmUiLCJyZXN1bHQiLCJwcmUiLCJuZXh0IiwiaGFzaCIsIm1vZGVsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBdEI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxJQUFJRSxNQUFNLEdBQUdILFFBQVEsQ0FBQ0csTUFBdEI7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBSUQsTUFBSixDQUFXO0FBQ3BCRSxFQUFBQSxRQUFRLEVBQUU7QUFDTkMsSUFBQUEsSUFBSSxFQUFFQyxNQURBO0FBRU5DLElBQUFBLE1BQU0sRUFBRSxJQUZGO0FBR05DLElBQUFBLFFBQVEsRUFBRSxJQUhKO0FBSU5DLElBQUFBLElBQUksRUFBRTtBQUpBLEdBRFU7QUFPcEJDLEVBQUFBLEtBQUssRUFBRTtBQUNITCxJQUFBQSxJQUFJLEVBQUVDLE1BREg7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLElBRkw7QUFHSEMsSUFBQUEsUUFBUSxFQUFFLElBSFA7QUFJSEMsSUFBQUEsSUFBSSxFQUFFO0FBSkgsR0FQYTtBQWFwQkUsRUFBQUEsUUFBUSxFQUFFO0FBQ05OLElBQUFBLElBQUksRUFBRUMsTUFEQTtBQUVORSxJQUFBQSxRQUFRLEVBQUU7QUFGSixHQWJVO0FBaUJwQkksRUFBQUEsTUFBTSxFQUFDTixNQWpCYTtBQWtCcEJPLEVBQUFBLEtBQUssRUFBRSxDQUFDO0FBQUNSLElBQUFBLElBQUksRUFBRUgsTUFBTSxDQUFDWSxLQUFQLENBQWFDLFFBQXBCO0FBQThCQyxJQUFBQSxHQUFHLEVBQUU7QUFBbkMsR0FBRDtBQWxCYSxDQUFYLEVBb0JiO0FBQUVDLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBcEJhLENBQWpCLEMsQ0F1QkE7O0FBQ0FkLFVBQVUsQ0FBQ2UsT0FBWCxDQUFtQkMsWUFBbkIsR0FBa0MsVUFBVVQsS0FBVixFQUFpQkMsUUFBakIsRUFBMkJTLFFBQTNCLEVBQXFDO0FBQ25FQyxFQUFBQSxJQUFJLENBQUNDLE9BQUwsQ0FBYTtBQUFDWixJQUFBQSxLQUFLLEVBQUVBO0FBQVIsR0FBYixFQUNLYSxJQURMLENBQ1UsVUFBVUMsR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQ3ZCLFFBQUlELEdBQUosRUFBUztBQUNMLGFBQU9KLFFBQVEsQ0FBQ0ksR0FBRCxDQUFmO0FBQ0gsS0FGRCxNQUdLLElBQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1osVUFBSUQsR0FBRyxHQUFHLElBQUlFLEtBQUosQ0FBVSxpQkFBVixDQUFWO0FBQ0FGLE1BQUFBLEdBQUcsQ0FBQ0csTUFBSixHQUFhLEdBQWI7QUFDQSxhQUFPUCxRQUFRLENBQUNJLEdBQUQsQ0FBZjtBQUNIOztBQUNEdkIsSUFBQUEsTUFBTSxDQUFDMkIsT0FBUCxDQUFlakIsUUFBZixFQUF5QmMsSUFBSSxDQUFDZCxRQUE5QixFQUF3QyxVQUFVYSxHQUFWLEVBQWVLLE1BQWYsRUFBdUI7QUFDM0QsVUFBSUEsTUFBTSxLQUFLLElBQWYsRUFBcUI7QUFDakIsZUFBT1QsUUFBUSxDQUFDLElBQUQsRUFBT0ssSUFBUCxDQUFmO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBT0wsUUFBUSxFQUFmO0FBQ0g7QUFDSixLQU5EO0FBT0gsR0FqQkw7QUFrQkgsQ0FuQkQsQyxDQXNCQTs7O0FBQ0FqQixVQUFVLENBQUMyQixHQUFYLENBQWUsTUFBZixFQUF1QixVQUFVQyxJQUFWLEVBQWdCO0FBQy9CLE1BQUlOLElBQUksR0FBRyxJQUFYO0FBQ0F4QixFQUFBQSxNQUFNLENBQUMrQixJQUFQLENBQVlQLElBQUksQ0FBQ2QsUUFBakIsRUFBMkIsRUFBM0IsRUFBK0IsVUFBVWEsR0FBVixFQUFlUSxJQUFmLEVBQXFCO0FBQzVDLFFBQUlSLEdBQUosRUFBUztBQUNELGFBQU9PLElBQUksQ0FBQ1AsR0FBRCxDQUFYO0FBQ1A7O0FBQ0RDLElBQUFBLElBQUksQ0FBQ2QsUUFBTCxHQUFnQnFCLElBQWhCO0FBQ0FELElBQUFBLElBQUk7QUFDWCxHQU5EO0FBT1AsQ0FURDtBQVlBLElBQUlWLElBQUksR0FBR3RCLFFBQVEsQ0FBQ2tDLEtBQVQsQ0FBZSxNQUFmLEVBQXVCOUIsVUFBdkIsQ0FBWDtBQUNBK0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZCxJQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcV2Vic3Rvcm1cXHBvZXRyeVdlYlxcbW9kZWxzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi4vcm91dGVzL2Nvbm5lY3REQicpO1xyXG52YXIgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0Jyk7XHJcblxyXG5sZXQgU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hO1xyXG5sZXQgVXNlclNjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgICAgIHVzZXJuYW1lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgdHJpbTogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW1haWw6IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICB1bmlxdWU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICB0cmltOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXNzd29yZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2VuZGVyOlN0cmluZyxcclxuICAgICAgICBsaWtlczogW3t0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogJ3BvZW1zJ31dXHJcbiAgICB9LFxyXG4gICAgeyBjb2xsZWN0aW9uOiAndXNlcnMnfVxyXG4pO1xyXG5cclxuLy9hdXRoZW50aWNhdGUgaW5wdXQgYWdhaW5zdCBkYXRhYmFzZVxyXG5Vc2VyU2NoZW1hLnN0YXRpY3MuYXV0aGVudGljYXRlID0gZnVuY3Rpb24gKGVtYWlsLCBwYXNzd29yZCwgY2FsbGJhY2spIHtcclxuICAgIFVzZXIuZmluZE9uZSh7ZW1haWw6IGVtYWlsfSlcclxuICAgICAgICAuZXhlYyhmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXVzZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kLicpO1xyXG4gICAgICAgICAgICAgICAgZXJyLnN0YXR1cyA9IDQwMTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdXNlcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG5cclxuLy9oYXNoaW5nIGEgcGFzc3dvcmQgYmVmb3JlIHNhdmluZyBpdCB0byB0aGUgZGF0YWJhc2VcclxuVXNlclNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgIHZhciB1c2VyID0gdGhpcztcclxuICAgICAgICBiY3J5cHQuaGFzaCh1c2VyLnBhc3N3b3JkLCAxMCwgZnVuY3Rpb24gKGVyciwgaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXNlci5wYXNzd29yZCA9IGhhc2g7XHJcbiAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgfSlcclxufSk7XHJcblxyXG5cclxudmFyIFVzZXIgPSBtb25nb29zZS5tb2RlbCgnVXNlcicsIFVzZXJTY2hlbWEpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXI7Il19",
    "map": {
      "version": 3,
      "sources": [
        "users.js"
      ],
      "names": [
        "mongoose",
        "require",
        "bcrypt",
        "Schema",
        "UserSchema",
        "username",
        "type",
        "String",
        "unique",
        "required",
        "trim",
        "email",
        "password",
        "gender",
        "likes",
        "Types",
        "ObjectId",
        "ref",
        "collection",
        "statics",
        "authenticate",
        "callback",
        "User",
        "findOne",
        "exec",
        "err",
        "user",
        "Error",
        "status",
        "compare",
        "result",
        "pre",
        "next",
        "hash",
        "model",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIE,MAAM,GAAGH,QAAQ,CAACG,MAAtB;AACA,IAAIC,UAAU,GAAG,IAAID,MAAJ,CAAW;AACpBE,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,MAAM,EAAE,IAFF;AAGNC,IAAAA,QAAQ,EAAE,IAHJ;AAINC,IAAAA,IAAI,EAAE;AAJA,GADU;AAOpBC,EAAAA,KAAK,EAAE;AACHL,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,MAAM,EAAE,IAFL;AAGHC,IAAAA,QAAQ,EAAE,IAHP;AAIHC,IAAAA,IAAI,EAAE;AAJH,GAPa;AAapBE,EAAAA,QAAQ,EAAE;AACNN,IAAAA,IAAI,EAAEC,MADA;AAENE,IAAAA,QAAQ,EAAE;AAFJ,GAbU;AAiBpBI,EAAAA,MAAM,EAACN,MAjBa;AAkBpBO,EAAAA,KAAK,EAAE,CAAC;AAACR,IAAAA,IAAI,EAAEH,MAAM,CAACY,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD;AAlBa,CAAX,EAoBb;AAAEC,EAAAA,UAAU,EAAE;AAAd,CApBa,CAAjB,C,CAuBA;;AACAd,UAAU,CAACe,OAAX,CAAmBC,YAAnB,GAAkC,UAAUT,KAAV,EAAiBC,QAAjB,EAA2BS,QAA3B,EAAqC;AACnEC,EAAAA,IAAI,CAACC,OAAL,CAAa;AAACZ,IAAAA,KAAK,EAAEA;AAAR,GAAb,EACKa,IADL,CACU,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACvB,QAAID,GAAJ,EAAS;AACL,aAAOJ,QAAQ,CAACI,GAAD,CAAf;AACH,KAFD,MAGK,IAAI,CAACC,IAAL,EAAW;AACZ,UAAID,GAAG,GAAG,IAAIE,KAAJ,CAAU,iBAAV,CAAV;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,GAAb;AACA,aAAOP,QAAQ,CAACI,GAAD,CAAf;AACH;;AACDvB,IAAAA,MAAM,CAAC2B,OAAP,CAAejB,QAAf,EAAyBc,IAAI,CAACd,QAA9B,EAAwC,UAAUa,GAAV,EAAeK,MAAf,EAAuB;AAC3D,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACjB,eAAOT,QAAQ,CAAC,IAAD,EAAOK,IAAP,CAAf;AACH,OAFD,MAEO;AACH,eAAOL,QAAQ,EAAf;AACH;AACJ,KAND;AAOH,GAjBL;AAkBH,CAnBD,C,CAsBA;;;AACAjB,UAAU,CAAC2B,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AAC/B,MAAIN,IAAI,GAAG,IAAX;AACAxB,EAAAA,MAAM,CAAC+B,IAAP,CAAYP,IAAI,CAACd,QAAjB,EAA2B,EAA3B,EAA+B,UAAUa,GAAV,EAAeQ,IAAf,EAAqB;AAC5C,QAAIR,GAAJ,EAAS;AACD,aAAOO,IAAI,CAACP,GAAD,CAAX;AACP;;AACDC,IAAAA,IAAI,CAACd,QAAL,GAAgBqB,IAAhB;AACAD,IAAAA,IAAI;AACX,GAND;AAOP,CATD;AAYA,IAAIV,IAAI,GAAGtB,QAAQ,CAACkC,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,CAAX;AACA+B,MAAM,CAACC,OAAP,GAAiBd,IAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "sourcesContent": [
        "let mongoose = require('../routes/connectDB');\r\nvar bcrypt = require('bcrypt');\r\n\r\nlet Schema = mongoose.Schema;\r\nlet UserSchema = new Schema({\r\n        username: {\r\n            type: String,\r\n            unique: true,\r\n            required: true,\r\n            trim: true\r\n        },\r\n        email: {\r\n            type: String,\r\n            unique: true,\r\n            required: true,\r\n            trim: true\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        gender:String,\r\n        likes: [{type: Schema.Types.ObjectId, ref: 'poems'}]\r\n    },\r\n    { collection: 'users'}\r\n);\r\n\r\n//authenticate input against database\r\nUserSchema.statics.authenticate = function (email, password, callback) {\r\n    User.findOne({email: email})\r\n        .exec(function (err, user) {\r\n            if (err) {\r\n                return callback(err)\r\n            }\r\n            else if (!user) {\r\n                var err = new Error('User not found.');\r\n                err.status = 401;\r\n                return callback(err);\r\n            }\r\n            bcrypt.compare(password, user.password, function (err, result) {\r\n                if (result === true) {\r\n                    return callback(null, user);\r\n                } else {\r\n                    return callback();\r\n                }\r\n            })\r\n        });\r\n}\r\n\r\n\r\n//hashing a password before saving it to the database\r\nUserSchema.pre('save', function (next) {\r\n        var user = this;\r\n        bcrypt.hash(user.password, 10, function (err, hash) {\r\n                if (err) {\r\n                        return next(err);\r\n                }\r\n                user.password = hash;\r\n                next();\r\n        })\r\n});\r\n\r\n\r\nvar User = mongoose.model('User', UserSchema);\r\nmodule.exports = User;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572864311455
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\poems.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\poems.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\poems.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\poems.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "poems.js"
      }
    },
    "ast": null,
    "code": "let Poem = require(\"../models/poems\");\n\nlet User = require(\"../models/users\");\n\nlet express = require('express');\n\nlet router = express.Router();\n\nrouter.findAllPoems = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader('Content-Type', 'application/json');\n  Poem.find(function (err, poems) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(poems, null, 5));\n  });\n};\n\nfunction getByValue(array, id) {\n  var result = array.filter(function (obj) {\n    return obj.id == id;\n  });\n  return result ? result[0] : null; // or undefined\n}\n\nrouter.findOnePoem = (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  Poem.find({\n    \"_id\": req.params.id\n  }, function (err, poem) {\n    if (err) res.json({\n      message: 'Poem NOT Found!',\n      errmsg: err\n    });else res.send(JSON.stringify(poem, null, 5));\n  });\n};\n\nrouter.addPoem = (req, res) => {\n  //Add a new donation to our list\n  var poem = new Poem();\n  poem.title = req.body.title;\n  poem.author = req.body.author;\n  poem.save(function (err) {\n    if (err) res.json({\n      message: 'Poem NOT Added!',\n      errmsg: err\n    });else res.json({\n      message: 'Poem Successfully Added!',\n      data: poem\n    });\n  });\n};\n\nrouter.incrementLikes = (req, res) => {\n  Poem.findById(req.params.id, function (err, poem) {\n    if (err) res.json({\n      message: 'Poem NOT Found!',\n      errmsg: err\n    });else {\n      poem.likes.push(req.session.userId);\n      /*if(poem.find( { likes: req.session.userId} )){\r\n          res.json({ message: 'You have already liked this poem!', errmsg : err } );\r\n      }\r\n      else {\r\n          poem.likes.push(req.session.userId);\r\n          //record which poem user liked, but didn't work. So users don't know what poems they have liked\r\n          User.findById(req.session.userId, function(err,user){\r\n              if (err)\r\n                  res.json({ message: 'User NOT Found!', errmsg : err } );\r\n              else {\r\n                  user.likes.push(poem._id);\r\n              }\r\n          })*/\n\n      poem.save(function (err) {\n        if (err) res.json({\n          message: 'Poem NOT liked!',\n          errmsg: err\n        });else res.json({\n          message: 'Poem Successfully Liked!',\n          data: poem\n        });\n      });\n    }\n  });\n};\n\nrouter.decreaseLikes = (req, res) => {\n  Poem.findById(req.params.id, function (err, poem) {\n    if (err) res.json({\n      message: 'Poem NOT Found!',\n      errmsg: err\n    });else {\n      poem.likes.remove(req.session.userId);\n      poem.save(function (err) {\n        if (err) res.json({\n          message: 'Poem NOT liked!',\n          errmsg: err\n        });else res.json({\n          message: 'Poem Successfully Unliked!',\n          data: poem\n        });\n      });\n    }\n  });\n};\n\nrouter.deletePoem = (req, res) => {\n  Poem.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: 'Poem NOT DELETED!',\n      errmsg: err\n    });else res.json({\n      message: 'Poem Successfully Deleted!'\n    });\n  });\n};\n/*\r\nfunction getTotalLikes(array) {\r\n    let totalLikes = 0;\r\n    array.forEach(function(obj) { totalLikes += obj.likes; });\r\n    return totalLikes;\r\n}\r\n\r\nrouter.findTotalLikes = (req, res) => {\r\n    Poem.find(function(err, poem) {\r\n        if (err)\r\n            res.send(err);\r\n        else\r\n            res.json({ totalLikes : getTotalLikes(poem) });\r\n    });\r\n}*/\n\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "poems.js"
      ],
      "names": [
        "Poem",
        "require",
        "User",
        "express",
        "router",
        "Router",
        "findAllPoems",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "poems",
        "send",
        "JSON",
        "stringify",
        "getByValue",
        "array",
        "id",
        "result",
        "filter",
        "obj",
        "findOnePoem",
        "params",
        "poem",
        "json",
        "message",
        "errmsg",
        "addPoem",
        "title",
        "body",
        "author",
        "save",
        "data",
        "incrementLikes",
        "findById",
        "likes",
        "push",
        "session",
        "userId",
        "decreaseLikes",
        "remove",
        "deletePoem",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "let Poem = require(\"../models/poems\")\r\nlet User = require(\"../models/users\")\r\nlet express = require('express');\r\nlet router = express.Router();\r\n\r\nrouter.findAllPoems = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader('Content-Type', 'application/json');\r\n    Poem.find(function(err, poems) {\r\n        if (err)\r\n            res.send(err);\r\n        res.send(JSON.stringify(poems,null,5));\r\n    });\r\n};\r\n\r\nfunction getByValue(array, id) {\r\n    var result  = array.filter(function(obj){return obj.id == id;} );\r\n    return result ? result[0] : null; // or undefined\r\n}\r\n\r\nrouter.findOnePoem = (req, res) => {\r\n    res.setHeader('Content-Type','application/json');\r\n\r\n    Poem.find({ \"_id\" : req.params.id },function(err, poem) {\r\n        if (err)\r\n            res.json({ message: 'Poem NOT Found!', errmsg : err } );\r\n        else\r\n            res.send(JSON.stringify(poem,null,5));\r\n    });\r\n};\r\n\r\nrouter.addPoem = (req, res) => {\r\n    //Add a new donation to our list\r\n    var poem = new Poem();\r\n\r\n    poem.title = req.body.title;\r\n    poem.author = req.body.author;\r\n\r\n    poem.save(function(err) {\r\n        if (err)\r\n            res.json({ message: 'Poem NOT Added!', errmsg : err } );\r\n        else\r\n            res.json({ message: 'Poem Successfully Added!', data: poem });\r\n    });\r\n};\r\n\r\n\r\nrouter.incrementLikes = (req, res) => {\r\n    Poem.findById(req.params.id, function(err,poem) {\r\n        if (err)\r\n            res.json({ message: 'Poem NOT Found!', errmsg : err } );\r\n        else {\r\n            poem.likes.push(req.session.userId);\r\n            /*if(poem.find( { likes: req.session.userId} )){\r\n                res.json({ message: 'You have already liked this poem!', errmsg : err } );\r\n            }\r\n            else {\r\n                poem.likes.push(req.session.userId);\r\n                //record which poem user liked, but didn't work. So users don't know what poems they have liked\r\n                User.findById(req.session.userId, function(err,user){\r\n                    if (err)\r\n                        res.json({ message: 'User NOT Found!', errmsg : err } );\r\n                    else {\r\n                        user.likes.push(poem._id);\r\n                    }\r\n                })*/\r\n            poem.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Poem NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Poem Successfully Liked!', data: poem });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.decreaseLikes = (req, res) => {\r\n    Poem.findById(req.params.id, function(err,poem) {\r\n        if (err)\r\n            res.json({ message: 'Poem NOT Found!', errmsg : err } );\r\n        else {\r\n            poem.likes.remove(req.session.userId);\r\n            poem.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Poem NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Poem Successfully Unliked!', data: poem });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.deletePoem = (req, res) => {\r\n    Poem.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: 'Poem NOT DELETED!', errmsg : err } );\r\n        else\r\n            res.json({ message: 'Poem Successfully Deleted!'});\r\n    });\r\n}\r\n\r\n/*\r\nfunction getTotalLikes(array) {\r\n    let totalLikes = 0;\r\n    array.forEach(function(obj) { totalLikes += obj.likes; });\r\n    return totalLikes;\r\n}\r\n\r\nrouter.findTotalLikes = (req, res) => {\r\n    Poem.find(function(err, poem) {\r\n        if (err)\r\n            res.send(err);\r\n        else\r\n            res.json({ totalLikes : getTotalLikes(poem) });\r\n    });\r\n}*/\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572197681938
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\models\\\\poems.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\models\\poems.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\models\\poems.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\models\\poems.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
        "sourceFileName": "poems.js"
      }
    },
    "ast": null,
    "code": "let mongoose = require('../routes/connectDB'); // mongoose.Promise = require('bluebird');\n\n\nlet Schema = mongoose.Schema;\nlet PoemSchema = new Schema({\n  title: String,\n  author: String,\n  // likes:{Number,default:0}\n  likes: [{\n    type: Schema.Types.ObjectId,\n    ref: 'users'\n  }]\n}, {\n  collection: 'poetry'\n});\nvar Poem = mongoose.model('Poem', PoemSchema);\nmodule.exports = Poem;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvZW1zLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIlNjaGVtYSIsIlBvZW1TY2hlbWEiLCJ0aXRsZSIsIlN0cmluZyIsImF1dGhvciIsImxpa2VzIiwidHlwZSIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJjb2xsZWN0aW9uIiwiUG9lbSIsIm1vZGVsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBdEIsQyxDQUNBOzs7QUFFQSxJQUFJQyxNQUFNLEdBQUdGLFFBQVEsQ0FBQ0UsTUFBdEI7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBSUQsTUFBSixDQUFXO0FBQ3BCRSxFQUFBQSxLQUFLLEVBQUVDLE1BRGE7QUFFcEJDLEVBQUFBLE1BQU0sRUFBRUQsTUFGWTtBQUdwQjtBQUNBRSxFQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUFDQyxJQUFBQSxJQUFJLEVBQUVOLE1BQU0sQ0FBQ08sS0FBUCxDQUFhQyxRQUFwQjtBQUE4QkMsSUFBQUEsR0FBRyxFQUFFO0FBQW5DLEdBQUQ7QUFKYSxDQUFYLEVBTWI7QUFBRUMsRUFBQUEsVUFBVSxFQUFFO0FBQWQsQ0FOYSxDQUFqQjtBQVVBLElBQUlDLElBQUksR0FBR2IsUUFBUSxDQUFDYyxLQUFULENBQWUsTUFBZixFQUF1QlgsVUFBdkIsQ0FBWDtBQUNBWSxNQUFNLENBQUNDLE9BQVAsR0FBaUJILElBQWpCIiwic291cmNlUm9vdCI6IkQ6XFxXZWJzdG9ybVxccG9ldHJ5V2ViXFxtb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbW9uZ29vc2UgPSByZXF1aXJlKCcuLi9yb3V0ZXMvY29ubmVjdERCJyk7XHJcbi8vIG1vbmdvb3NlLlByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xyXG5cclxubGV0IFNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYTtcclxubGV0IFBvZW1TY2hlbWEgPSBuZXcgU2NoZW1hKHtcclxuICAgICAgICB0aXRsZTogU3RyaW5nLFxyXG4gICAgICAgIGF1dGhvcjogU3RyaW5nLFxyXG4gICAgICAgIC8vIGxpa2VzOntOdW1iZXIsZGVmYXVsdDowfVxyXG4gICAgICAgIGxpa2VzOiBbe3R5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiAndXNlcnMnfV1cclxuICAgIH0sXHJcbiAgICB7IGNvbGxlY3Rpb246ICdwb2V0cnknfVxyXG4pO1xyXG5cclxuXHJcbnZhciBQb2VtID0gbW9uZ29vc2UubW9kZWwoJ1BvZW0nLCBQb2VtU2NoZW1hKTtcclxubW9kdWxlLmV4cG9ydHMgPSBQb2VtOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "poems.js"
      ],
      "names": [
        "mongoose",
        "require",
        "Schema",
        "PoemSchema",
        "title",
        "String",
        "author",
        "likes",
        "type",
        "Types",
        "ObjectId",
        "ref",
        "collection",
        "Poem",
        "model",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CACA;;;AAEA,IAAIC,MAAM,GAAGF,QAAQ,CAACE,MAAtB;AACA,IAAIC,UAAU,GAAG,IAAID,MAAJ,CAAW;AACpBE,EAAAA,KAAK,EAAEC,MADa;AAEpBC,EAAAA,MAAM,EAAED,MAFY;AAGpB;AACAE,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAApB;AAA8BC,IAAAA,GAAG,EAAE;AAAnC,GAAD;AAJa,CAAX,EAMb;AAAEC,EAAAA,UAAU,EAAE;AAAd,CANa,CAAjB;AAUA,IAAIC,IAAI,GAAGb,QAAQ,CAACc,KAAT,CAAe,MAAf,EAAuBX,UAAvB,CAAX;AACAY,MAAM,CAACC,OAAP,GAAiBH,IAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\models",
      "sourcesContent": [
        "let mongoose = require('../routes/connectDB');\r\n// mongoose.Promise = require('bluebird');\r\n\r\nlet Schema = mongoose.Schema;\r\nlet PoemSchema = new Schema({\r\n        title: String,\r\n        author: String,\r\n        // likes:{Number,default:0}\r\n        likes: [{type: Schema.Types.ObjectId, ref: 'users'}]\r\n    },\r\n    { collection: 'poetry'}\r\n);\r\n\r\n\r\nvar Poem = mongoose.model('Poem', PoemSchema);\r\nmodule.exports = Poem;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572830873515
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\routes\\\\authors.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\routes\\authors.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\routes\\authors.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\routes\\authors.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
        "sourceFileName": "authors.js"
      }
    },
    "ast": null,
    "code": "let Poem = require(\"../models/poems\");\n\nlet Author = require(\"../models/authors\");\n\nlet express = require('express');\n\nlet router = express.Router();\n\nrouter.findAllAuthors = (req, res) => {\n  // Return a JSON representation of our list\n  res.setHeader('Content-Type', 'application/json');\n  Author.find(function (err, author) {\n    if (err) res.send(err);\n    res.send(JSON.stringify(author, null, 5));\n  });\n};\n\nrouter.findOneAuthor = (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  Author.find({\n    \"_id\": req.params.id\n  }, function (err, author) {\n    if (err) res.json({\n      message: 'Author NOT Found!',\n      errmsg: err\n    });else res.send(JSON.stringify(author, null, 5));\n  });\n};\n\nrouter.addAuthor = (req, res) => {\n  //Add a new donation to our list\n  var author = new Author();\n  author.name = req.body.name;\n  author.introduction = req.body.introduction;\n  author.save(function (err) {\n    if (err) res.json({\n      message: 'Author NOT Added!',\n      errmsg: err\n    });else res.json({\n      message: 'Author Successfully Added!',\n      data: author\n    });\n  });\n};\n\nrouter.incrementLikes = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: 'Author NOT Found!',\n      errmsg: err\n    });else {\n      author.likes.push(req.session.userId);\n      author.save(function (err) {\n        if (err) res.json({\n          message: 'Author NOT liked!',\n          errmsg: err\n        });else res.json({\n          message: 'Author Successfully Liked!',\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.decreaseLikes = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: 'Author NOT Found!',\n      errmsg: err\n    });else {\n      author.likes.remove(req.session.userId);\n      author.save(function (err) {\n        if (err) res.json({\n          message: 'Author NOT liked!',\n          errmsg: err\n        });else res.json({\n          message: 'Author Successfully Unliked!',\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.incrementWorks = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: 'Author NOT Found!',\n      errmsg: err\n    });else {\n      author.works.push(req.body.poemId);\n      author.save(function (err) {\n        if (err) res.json({\n          message: 'Work NOT Added!',\n          errmsg: err\n        });else res.json({\n          message: 'Work Successfully Added!',\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.deleteWorks = (req, res) => {\n  Author.findById(req.params.id, function (err, author) {\n    if (err) res.json({\n      message: 'Author NOT Found!',\n      errmsg: err\n    });else {\n      author.works.remove(req.body.poemId);\n      author.save(function (err) {\n        if (err) res.json({\n          message: 'Author NOT liked!',\n          errmsg: err\n        });else res.json({\n          message: 'Work Successfully deleted!',\n          data: author\n        });\n      });\n    }\n  });\n};\n\nrouter.deleteAuthor = (req, res) => {\n  Author.findByIdAndRemove(req.params.id, function (err) {\n    if (err) res.json({\n      message: 'Author NOT DELETED!',\n      errmsg: err\n    });else res.json({\n      message: 'Author Successfully Deleted!'\n    });\n  });\n};\n\nmodule.exports = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "authors.js"
      ],
      "names": [
        "Poem",
        "require",
        "Author",
        "express",
        "router",
        "Router",
        "findAllAuthors",
        "req",
        "res",
        "setHeader",
        "find",
        "err",
        "author",
        "send",
        "JSON",
        "stringify",
        "findOneAuthor",
        "params",
        "id",
        "json",
        "message",
        "errmsg",
        "addAuthor",
        "name",
        "body",
        "introduction",
        "save",
        "data",
        "incrementLikes",
        "findById",
        "likes",
        "push",
        "session",
        "userId",
        "decreaseLikes",
        "remove",
        "incrementWorks",
        "works",
        "poemId",
        "deleteWorks",
        "deleteAuthor",
        "findByIdAndRemove",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,MAAM,GAAGD,OAAO,CAACE,MAAR,EAAb;;AAEAD,MAAM,CAACE,cAAP,GAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClC;AACAA,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAP,EAAAA,MAAM,CAACQ,IAAP,CAAY,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAC9B,QAAID,GAAJ,EACIH,GAAG,CAACK,IAAJ,CAASF,GAAT;AACJH,IAAAA,GAAG,CAACK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAsB,IAAtB,EAA2B,CAA3B,CAAT;AACH,GAJD;AAKH,CARD;;AAUAR,MAAM,CAACY,aAAP,GAAuB,CAACT,GAAD,EAAMC,GAAN,KAAc;AACjCA,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA6B,kBAA7B;AAEAP,EAAAA,MAAM,CAACQ,IAAP,CAAY;AAAE,WAAQH,GAAG,CAACU,MAAJ,CAAWC;AAArB,GAAZ,EAAsC,UAASP,GAAT,EAAcC,MAAd,EAAsB;AACxD,QAAID,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGV;AAAzC,KAAT,EADJ,KAGIH,GAAG,CAACK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAsB,IAAtB,EAA2B,CAA3B,CAAT;AACP,GALD;AAMH,CATD;;AAWAR,MAAM,CAACkB,SAAP,GAAmB,CAACf,GAAD,EAAMC,GAAN,KAAc;AAC7B;AACA,MAAII,MAAM,GAAG,IAAIV,MAAJ,EAAb;AAEAU,EAAAA,MAAM,CAACW,IAAP,GAAchB,GAAG,CAACiB,IAAJ,CAASD,IAAvB;AACAX,EAAAA,MAAM,CAACa,YAAP,GAAsBlB,GAAG,CAACiB,IAAJ,CAASC,YAA/B;AAEAb,EAAAA,MAAM,CAACc,IAAP,CAAY,UAASf,GAAT,EAAc;AACtB,QAAIA,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGV;AAAzC,KAAT,EADJ,KAGIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,4BAAX;AAAyCO,MAAAA,IAAI,EAAEf;AAA/C,KAAT;AACP,GALD;AAMH,CAbD;;AAgBAR,MAAM,CAACwB,cAAP,GAAwB,CAACrB,GAAD,EAAMC,GAAN,KAAc;AAClCN,EAAAA,MAAM,CAAC2B,QAAP,CAAgBtB,GAAG,CAACU,MAAJ,CAAWC,EAA3B,EAA+B,UAASP,GAAT,EAAaC,MAAb,EAAqB;AAChD,QAAID,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGV;AAAzC,KAAT,EADJ,KAEK;AACDC,MAAAA,MAAM,CAACkB,KAAP,CAAaC,IAAb,CAAkBxB,GAAG,CAACyB,OAAJ,CAAYC,MAA9B;AACArB,MAAAA,MAAM,CAACc,IAAP,CAAY,UAAUf,GAAV,EAAe;AACvB,YAAIA,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,mBAAX;AAAgCC,UAAAA,MAAM,EAAGV;AAAzC,SAAT,EADJ,KAGIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,4BAAX;AAAyCO,UAAAA,IAAI,EAAEf;AAA/C,SAAT;AACP,OALD;AAMH;AACJ,GAZD;AAaH,CAdD;;AAgBAR,MAAM,CAAC8B,aAAP,GAAuB,CAAC3B,GAAD,EAAMC,GAAN,KAAc;AACjCN,EAAAA,MAAM,CAAC2B,QAAP,CAAgBtB,GAAG,CAACU,MAAJ,CAAWC,EAA3B,EAA+B,UAASP,GAAT,EAAaC,MAAb,EAAqB;AAChD,QAAID,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGV;AAAzC,KAAT,EADJ,KAEK;AACDC,MAAAA,MAAM,CAACkB,KAAP,CAAaK,MAAb,CAAoB5B,GAAG,CAACyB,OAAJ,CAAYC,MAAhC;AACArB,MAAAA,MAAM,CAACc,IAAP,CAAY,UAAUf,GAAV,EAAe;AACvB,YAAIA,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,mBAAX;AAAgCC,UAAAA,MAAM,EAAGV;AAAzC,SAAT,EADJ,KAGIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,8BAAX;AAA2CO,UAAAA,IAAI,EAAEf;AAAjD,SAAT;AACP,OALD;AAMH;AACJ,GAZD;AAaH,CAdD;;AAiBAR,MAAM,CAACgC,cAAP,GAAwB,CAAC7B,GAAD,EAAMC,GAAN,KAAc;AAClCN,EAAAA,MAAM,CAAC2B,QAAP,CAAgBtB,GAAG,CAACU,MAAJ,CAAWC,EAA3B,EAA+B,UAASP,GAAT,EAAaC,MAAb,EAAqB;AAChD,QAAID,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGV;AAAzC,KAAT,EADJ,KAEK;AACDC,MAAAA,MAAM,CAACyB,KAAP,CAAaN,IAAb,CAAkBxB,GAAG,CAACiB,IAAJ,CAASc,MAA3B;AACA1B,MAAAA,MAAM,CAACc,IAAP,CAAY,UAAUf,GAAV,EAAe;AACvB,YAAIA,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,iBAAX;AAA8BC,UAAAA,MAAM,EAAGV;AAAvC,SAAT,EADJ,KAGIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,0BAAX;AAAuCO,UAAAA,IAAI,EAAEf;AAA7C,SAAT;AACP,OALD;AAMH;AACJ,GAZD;AAaH,CAdD;;AAgBAR,MAAM,CAACmC,WAAP,GAAqB,CAAChC,GAAD,EAAMC,GAAN,KAAc;AAC/BN,EAAAA,MAAM,CAAC2B,QAAP,CAAgBtB,GAAG,CAACU,MAAJ,CAAWC,EAA3B,EAA+B,UAASP,GAAT,EAAaC,MAAb,EAAqB;AAChD,QAAID,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,mBAAX;AAAgCC,MAAAA,MAAM,EAAGV;AAAzC,KAAT,EADJ,KAEK;AACDC,MAAAA,MAAM,CAACyB,KAAP,CAAaF,MAAb,CAAoB5B,GAAG,CAACiB,IAAJ,CAASc,MAA7B;AACA1B,MAAAA,MAAM,CAACc,IAAP,CAAY,UAAUf,GAAV,EAAe;AACvB,YAAIA,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,mBAAX;AAAgCC,UAAAA,MAAM,EAAGV;AAAzC,SAAT,EADJ,KAGIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE,4BAAX;AAAyCO,UAAAA,IAAI,EAAEf;AAA/C,SAAT;AACP,OALD;AAMH;AACJ,GAZD;AAaH,CAdD;;AAgBAR,MAAM,CAACoC,YAAP,GAAsB,CAACjC,GAAD,EAAMC,GAAN,KAAc;AAChCN,EAAAA,MAAM,CAACuC,iBAAP,CAAyBlC,GAAG,CAACU,MAAJ,CAAWC,EAApC,EAAwC,UAASP,GAAT,EAAc;AAClD,QAAIA,GAAJ,EACIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,qBAAX;AAAkCC,MAAAA,MAAM,EAAGV;AAA3C,KAAT,EADJ,KAGIH,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACP,GALD;AAMH,CAPD;;AAUAsB,MAAM,CAACC,OAAP,GAAiBvC,MAAjB",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\routes",
      "sourcesContent": [
        "let Poem = require(\"../models/poems\")\r\nlet Author = require(\"../models/authors\")\r\nlet express = require('express');\r\nlet router = express.Router();\r\n\r\nrouter.findAllAuthors = (req, res) => {\r\n    // Return a JSON representation of our list\r\n    res.setHeader('Content-Type', 'application/json');\r\n    Author.find(function(err, author) {\r\n        if (err)\r\n            res.send(err);\r\n        res.send(JSON.stringify(author,null,5));\r\n    });\r\n};\r\n\r\nrouter.findOneAuthor = (req, res) => {\r\n    res.setHeader('Content-Type','application/json');\r\n\r\n    Author.find({ \"_id\" : req.params.id },function(err, author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else\r\n            res.send(JSON.stringify(author,null,5));\r\n    });\r\n}\r\n\r\nrouter.addAuthor = (req, res) => {\r\n    //Add a new donation to our list\r\n    var author = new Author();\r\n\r\n    author.name = req.body.name;\r\n    author.introduction = req.body.introduction;\r\n\r\n    author.save(function(err) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Added!', errmsg : err } );\r\n        else\r\n            res.json({ message: 'Author Successfully Added!', data: author });\r\n    });\r\n}\r\n\r\n\r\nrouter.incrementLikes = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.likes.push(req.session.userId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Author Successfully Liked!', data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.decreaseLikes = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.likes.remove(req.session.userId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Author Successfully Unliked!', data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\nrouter.incrementWorks = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.works.push(req.body.poemId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Work NOT Added!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Work Successfully Added!', data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.deleteWorks = (req, res) => {\r\n    Author.findById(req.params.id, function(err,author) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT Found!', errmsg : err } );\r\n        else {\r\n            author.works.remove(req.body.poemId);\r\n            author.save(function (err) {\r\n                if (err)\r\n                    res.json({ message: 'Author NOT liked!', errmsg : err } );\r\n                else\r\n                    res.json({ message: 'Work Successfully deleted!', data: author });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.deleteAuthor = (req, res) => {\r\n    Author.findByIdAndRemove(req.params.id, function(err) {\r\n        if (err)\r\n            res.json({ message: 'Author NOT DELETED!', errmsg : err } );\r\n        else\r\n            res.json({ message: 'Author Successfully Deleted!'});\r\n    });\r\n}\r\n\r\n\r\nmodule.exports = router;"
      ]
    },
    "sourceType": "module",
    "mtime": 1572186989051
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\functional\\\\api\\\\usersTest.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\usersTest.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\usersTest.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\functional\\api\\usersTest.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
        "sourceFileName": "usersTest.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst server = require(\"../../../bin/www\");\n\nconst expect = chai.expect;\n\nconst request = require(\"supertest\");\n\nconst _ = require(\"lodash\");\n\nlet User = require(\"../../../models/users\");\n\nlet validID;\ndescribe(\"Users\", () => {\n  beforeEach(async () => {\n    try {\n      await User.deleteMany({});\n      let user = new User();\n      user.username = \"YeatsFans\";\n      user.email = \"LovYeats@lala.com\";\n      user.password = \"trytry123\";\n      user.gender = \"Male\";\n      await user.save();\n      user = new User();\n      user.username = \"DufuFans\";\n      user.email = \"LoveDF@haha.com\";\n      user.password = \"trytry345\";\n      user.gender = \"Female\";\n      await user.save();\n      user = await User.findOne({\n        username: \"YeatsFans\"\n      });\n      validID = user._id;\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  describe(\"GET /users\", () => {\n    it(\"should return all the users\", done => {\n      request(server).get(\"/users\").set(\"Accept\", \"application/json\").expect(\"Content-Type\", /json/).expect(200).end((err, res) => {\n        try {\n          expect(res.body).to.be.a(\"array\");\n          expect(res.body.length).to.equal(2);\n\n          let result = _.map(res.body, user => {\n            return {\n              username: user.username\n            };\n          });\n\n          expect(result).to.deep.include({\n            username: \"YeatsFans\"\n          });\n          expect(result).to.deep.include({\n            username: \"DufuFans\"\n          });\n          done();\n        } catch (e) {\n          done(e);\n        }\n      });\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzVGVzdC5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsInNlcnZlciIsImV4cGVjdCIsInJlcXVlc3QiLCJfIiwiVXNlciIsInZhbGlkSUQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJkZWxldGVNYW55IiwidXNlciIsInVzZXJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImdlbmRlciIsInNhdmUiLCJmaW5kT25lIiwiX2lkIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiaXQiLCJkb25lIiwiZ2V0Iiwic2V0IiwiZW5kIiwiZXJyIiwicmVzIiwiYm9keSIsInRvIiwiYmUiLCJhIiwibGVuZ3RoIiwiZXF1YWwiLCJyZXN1bHQiLCJtYXAiLCJkZWVwIiwiaW5jbHVkZSIsImUiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsa0JBQUQsQ0FBdEI7O0FBQ0EsTUFBTUUsTUFBTSxHQUFHSCxJQUFJLENBQUNHLE1BQXBCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTUksQ0FBQyxHQUFHSixPQUFPLENBQUMsUUFBRCxDQUFqQjs7QUFFQSxJQUFJSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyx1QkFBRCxDQUFsQjs7QUFDQSxJQUFJTSxPQUFKO0FBRUFDLFFBQVEsQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUNwQkMsRUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDbkIsUUFBSTtBQUNBLFlBQU1ILElBQUksQ0FBQ0ksVUFBTCxDQUFnQixFQUFoQixDQUFOO0FBQ0EsVUFBSUMsSUFBSSxHQUFHLElBQUlMLElBQUosRUFBWDtBQUNBSyxNQUFBQSxJQUFJLENBQUNDLFFBQUwsR0FBZ0IsV0FBaEI7QUFDQUQsTUFBQUEsSUFBSSxDQUFDRSxLQUFMLEdBQWEsbUJBQWI7QUFDQUYsTUFBQUEsSUFBSSxDQUFDRyxRQUFMLEdBQWUsV0FBZjtBQUNBSCxNQUFBQSxJQUFJLENBQUNJLE1BQUwsR0FBWSxNQUFaO0FBQ0EsWUFBTUosSUFBSSxDQUFDSyxJQUFMLEVBQU47QUFFQUwsTUFBQUEsSUFBSSxHQUFHLElBQUlMLElBQUosRUFBUDtBQUNBSyxNQUFBQSxJQUFJLENBQUNDLFFBQUwsR0FBZ0IsVUFBaEI7QUFDQUQsTUFBQUEsSUFBSSxDQUFDRSxLQUFMLEdBQWEsaUJBQWI7QUFDQUYsTUFBQUEsSUFBSSxDQUFDRyxRQUFMLEdBQWUsV0FBZjtBQUNBSCxNQUFBQSxJQUFJLENBQUNJLE1BQUwsR0FBWSxRQUFaO0FBQ0EsWUFBTUosSUFBSSxDQUFDSyxJQUFMLEVBQU47QUFFQUwsTUFBQUEsSUFBSSxHQUFHLE1BQU1MLElBQUksQ0FBQ1csT0FBTCxDQUFhO0FBQUNMLFFBQUFBLFFBQVEsRUFBQztBQUFWLE9BQWIsQ0FBYjtBQUNBTCxNQUFBQSxPQUFPLEdBQUdJLElBQUksQ0FBQ08sR0FBZjtBQUNILEtBbEJELENBa0JFLE9BQU9DLEtBQVAsRUFBYztBQUNaQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsS0FBWjtBQUNIO0FBQ0osR0F0QlMsQ0FBVjtBQXVCQVgsRUFBQUEsUUFBUSxDQUFDLFlBQUQsRUFBZSxNQUFNO0FBQ3pCYyxJQUFBQSxFQUFFLENBQUMsNkJBQUQsRUFBZ0NDLElBQUksSUFBSTtBQUN0Q25CLE1BQUFBLE9BQU8sQ0FBQ0YsTUFBRCxDQUFQLENBQ0tzQixHQURMLENBQ1MsUUFEVCxFQUVLQyxHQUZMLENBRVMsUUFGVCxFQUVtQixrQkFGbkIsRUFHS3RCLE1BSEwsQ0FHWSxjQUhaLEVBRzRCLE1BSDVCLEVBSUtBLE1BSkwsQ0FJWSxHQUpaLEVBS0t1QixHQUxMLENBS1MsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDZixZQUFHO0FBQ0N6QixVQUFBQSxNQUFNLENBQUN5QixHQUFHLENBQUNDLElBQUwsQ0FBTixDQUFpQkMsRUFBakIsQ0FBb0JDLEVBQXBCLENBQXVCQyxDQUF2QixDQUF5QixPQUF6QjtBQUNBN0IsVUFBQUEsTUFBTSxDQUFDeUIsR0FBRyxDQUFDQyxJQUFKLENBQVNJLE1BQVYsQ0FBTixDQUF3QkgsRUFBeEIsQ0FBMkJJLEtBQTNCLENBQWlDLENBQWpDOztBQUNBLGNBQUlDLE1BQU0sR0FBRzlCLENBQUMsQ0FBQytCLEdBQUYsQ0FBTVIsR0FBRyxDQUFDQyxJQUFWLEVBQWdCbEIsSUFBSSxJQUFJO0FBQ2pDLG1CQUFPO0FBQUVDLGNBQUFBLFFBQVEsRUFBRUQsSUFBSSxDQUFDQztBQUFqQixhQUFQO0FBQ0gsV0FGWSxDQUFiOztBQUdBVCxVQUFBQSxNQUFNLENBQUNnQyxNQUFELENBQU4sQ0FBZUwsRUFBZixDQUFrQk8sSUFBbEIsQ0FBdUJDLE9BQXZCLENBQStCO0FBQUUxQixZQUFBQSxRQUFRLEVBQUU7QUFBWixXQUEvQjtBQUNBVCxVQUFBQSxNQUFNLENBQUNnQyxNQUFELENBQU4sQ0FBZUwsRUFBZixDQUFrQk8sSUFBbEIsQ0FBdUJDLE9BQXZCLENBQStCO0FBQUUxQixZQUFBQSxRQUFRLEVBQUU7QUFBWixXQUEvQjtBQUNBVyxVQUFBQSxJQUFJO0FBQ1AsU0FURCxDQVNFLE9BQU9nQixDQUFQLEVBQVU7QUFDUmhCLFVBQUFBLElBQUksQ0FBQ2dCLENBQUQsQ0FBSjtBQUNIO0FBQ0osT0FsQkw7QUFtQkgsS0FwQkMsQ0FBRjtBQXFCSCxHQXRCTyxDQUFSO0FBdUJILENBL0NPLENBQVIiLCJzb3VyY2VSb290IjoiRDpcXFdlYnN0b3JtXFxwb2V0cnlXZWJcXHRlc3RcXGZ1bmN0aW9uYWxcXGFwaSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoYWkgPSByZXF1aXJlKFwiY2hhaVwiKTtcclxuY29uc3Qgc2VydmVyID0gcmVxdWlyZShcIi4uLy4uLy4uL2Jpbi93d3dcIik7XHJcbmNvbnN0IGV4cGVjdCA9IGNoYWkuZXhwZWN0O1xyXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZShcInN1cGVydGVzdFwiKTtcclxuY29uc3QgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcblxyXG5sZXQgVXNlciA9IHJlcXVpcmUoXCIuLi8uLi8uLi9tb2RlbHMvdXNlcnNcIik7XHJcbmxldCB2YWxpZElEO1xyXG5cclxuZGVzY3JpYmUoXCJVc2Vyc1wiLCAoKSA9PiB7XHJcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCBVc2VyLmRlbGV0ZU1hbnkoe30pO1xyXG4gICAgICAgICAgICBsZXQgdXNlciA9IG5ldyBVc2VyKCk7XHJcbiAgICAgICAgICAgIHVzZXIudXNlcm5hbWUgPSBcIlllYXRzRmFuc1wiO1xyXG4gICAgICAgICAgICB1c2VyLmVtYWlsID0gXCJMb3ZZZWF0c0BsYWxhLmNvbVwiXHJcbiAgICAgICAgICAgIHVzZXIucGFzc3dvcmQ9IFwidHJ5dHJ5MTIzXCI7XHJcbiAgICAgICAgICAgIHVzZXIuZ2VuZGVyPVwiTWFsZVwiO1xyXG4gICAgICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHVzZXIgPSBuZXcgVXNlcigpO1xyXG4gICAgICAgICAgICB1c2VyLnVzZXJuYW1lID0gXCJEdWZ1RmFuc1wiO1xyXG4gICAgICAgICAgICB1c2VyLmVtYWlsID0gXCJMb3ZlREZAaGFoYS5jb21cIlxyXG4gICAgICAgICAgICB1c2VyLnBhc3N3b3JkPSBcInRyeXRyeTM0NVwiO1xyXG4gICAgICAgICAgICB1c2VyLmdlbmRlcj1cIkZlbWFsZVwiO1xyXG4gICAgICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoe3VzZXJuYW1lOlwiWWVhdHNGYW5zXCJ9KTtcclxuICAgICAgICAgICAgdmFsaWRJRCA9IHVzZXIuX2lkO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKFwiR0VUIC91c2Vyc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgaXQoXCJzaG91bGQgcmV0dXJuIGFsbCB0aGUgdXNlcnNcIiwgZG9uZSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3Qoc2VydmVyKVxyXG4gICAgICAgICAgICAgICAgLmdldChcIi91c2Vyc1wiKVxyXG4gICAgICAgICAgICAgICAgLnNldChcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgICAgICAgICAgICAgIC5leHBlY3QoXCJDb250ZW50LVR5cGVcIiwgL2pzb24vKVxyXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXHJcbiAgICAgICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlcy5ib2R5KS50by5iZS5hKFwiYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXMuYm9keS5sZW5ndGgpLnRvLmVxdWFsKDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gXy5tYXAocmVzLmJvZHksIHVzZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWV9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHJlc3VsdCkudG8uZGVlcC5pbmNsdWRlKHsgdXNlcm5hbWU6IFwiWWVhdHNGYW5zXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmRlZXAuaW5jbHVkZSh7IHVzZXJuYW1lOiBcIkR1ZnVGYW5zXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "usersTest.js"
      ],
      "names": [
        "chai",
        "require",
        "server",
        "expect",
        "request",
        "_",
        "User",
        "validID",
        "describe",
        "beforeEach",
        "deleteMany",
        "user",
        "username",
        "email",
        "password",
        "gender",
        "save",
        "findOne",
        "_id",
        "error",
        "console",
        "log",
        "it",
        "done",
        "get",
        "set",
        "end",
        "err",
        "res",
        "body",
        "to",
        "be",
        "a",
        "length",
        "equal",
        "result",
        "map",
        "deep",
        "include",
        "e"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test\\functional\\api",
      "sourcesContent": [
        "const chai = require(\"chai\");\r\nconst server = require(\"../../../bin/www\");\r\nconst expect = chai.expect;\r\nconst request = require(\"supertest\");\r\nconst _ = require(\"lodash\");\r\n\r\nlet User = require(\"../../../models/users\");\r\nlet validID;\r\n\r\ndescribe(\"Users\", () => {\r\n    beforeEach(async () => {\r\n        try {\r\n            await User.deleteMany({});\r\n            let user = new User();\r\n            user.username = \"YeatsFans\";\r\n            user.email = \"LovYeats@lala.com\"\r\n            user.password= \"trytry123\";\r\n            user.gender=\"Male\";\r\n            await user.save();\r\n\r\n            user = new User();\r\n            user.username = \"DufuFans\";\r\n            user.email = \"LoveDF@haha.com\"\r\n            user.password= \"trytry345\";\r\n            user.gender=\"Female\";\r\n            await user.save();\r\n\r\n            user = await User.findOne({username:\"YeatsFans\"});\r\n            validID = user._id;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    });\r\n    describe(\"GET /users\", () => {\r\n        it(\"should return all the users\", done => {\r\n            request(server)\r\n                .get(\"/users\")\r\n                .set(\"Accept\", \"application/json\")\r\n                .expect(\"Content-Type\", /json/)\r\n                .expect(200)\r\n                .end((err, res) => {\r\n                    try{\r\n                        expect(res.body).to.be.a(\"array\");\r\n                        expect(res.body.length).to.equal(2);\r\n                        let result = _.map(res.body, user => {\r\n                            return { username: user.username};\r\n                        });\r\n                        expect(result).to.deep.include({ username: \"YeatsFans\" });\r\n                        expect(result).to.deep.include({ username: \"DufuFans\" });\r\n                        done();\r\n                    } catch (e) {\r\n                        done(e);\r\n                    }\r\n                });\r\n        });\r\n    });\r\n});\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572877503150
  },
  "{\"sourceRoot\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Webstorm\\\\poetryWeb\",\"filename\":\"D:\\\\Webstorm\\\\poetryWeb\\\\test\\\\activitiesAfterLogin.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test \",\"root\":\"D:\\\\Webstorm\\\\poetryWeb\",\"plugins\":[],\"presets\":[]}:7.3.4:test ": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Webstorm\\poetryWeb",
      "filename": "D:\\Webstorm\\poetryWeb\\test\\activitiesAfterLogin.js",
      "babelrc": false,
      "configFile": false,
      "envName": "test ",
      "root": "D:\\Webstorm\\poetryWeb",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Webstorm\\poetryWeb\\test\\activitiesAfterLogin.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Webstorm\\poetryWeb\\test\\activitiesAfterLogin.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Webstorm\\poetryWeb\\test",
        "sourceFileName": "activitiesAfterLogin.js"
      }
    },
    "ast": null,
    "code": "/*\r\nvar expect = require('chai').expect;\r\nvar app = require('../app');\r\nvar request = require('supertest');\r\n\r\n//let's set up the data we need to pass to the login method\r\nconst userCredentials = {\r\n    email: 'sponge@bob.com',\r\n    password: 'garyTheSnail'\r\n}\r\n//now let's login the user before we run any tests\r\nvar authenticatedUser = request.agent(app);\r\nbefore(function(done){\r\n    authenticatedUser\r\n        .post('/users/login')\r\n        .send(userCredentials)\r\n        .end(function(err, response){\r\n            expect(response.statusCode).to.equal(200);\r\n            done();\r\n        });\r\n});\r\n//this test says: make a POST to the /login route with the email: sponge@bob.com, password: garyTheSnail\r\n//after the POST has completed, make sure the status code is 200\r\n//also make sure that the user has been directed to the /home page\r\n\r\ndescribe('GET /profile', function(done){\r\n//addresses 1st bullet point: if the user is logged in we should get a 200 status code\r\n    it('should return a 200 response if the user is logged in', function(done){\r\n        authenticatedUser.get('/profile')\r\n            .expect(200, done);\r\n    });\r\n//addresses 2nd bullet point: if the user is not logged in we should get a 302 response code and be directed to the /login page\r\n    it('should return a 302 response and redirect to /login', function(done){\r\n        request(app).get('/profile')\r\n            .expect('Location', '/login')\r\n            .expect(302, done);\r\n    });\r\n});*/\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXRpZXNBZnRlckxvZ2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IkQ6XFxXZWJzdG9ybVxccG9ldHJ5V2ViXFx0ZXN0Iiwic291cmNlc0NvbnRlbnQiOlsiLypcclxudmFyIGV4cGVjdCA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3Q7XHJcbnZhciBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcclxudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdzdXBlcnRlc3QnKTtcclxuXHJcbi8vbGV0J3Mgc2V0IHVwIHRoZSBkYXRhIHdlIG5lZWQgdG8gcGFzcyB0byB0aGUgbG9naW4gbWV0aG9kXHJcbmNvbnN0IHVzZXJDcmVkZW50aWFscyA9IHtcclxuICAgIGVtYWlsOiAnc3BvbmdlQGJvYi5jb20nLFxyXG4gICAgcGFzc3dvcmQ6ICdnYXJ5VGhlU25haWwnXHJcbn1cclxuLy9ub3cgbGV0J3MgbG9naW4gdGhlIHVzZXIgYmVmb3JlIHdlIHJ1biBhbnkgdGVzdHNcclxudmFyIGF1dGhlbnRpY2F0ZWRVc2VyID0gcmVxdWVzdC5hZ2VudChhcHApO1xyXG5iZWZvcmUoZnVuY3Rpb24oZG9uZSl7XHJcbiAgICBhdXRoZW50aWNhdGVkVXNlclxyXG4gICAgICAgIC5wb3N0KCcvdXNlcnMvbG9naW4nKVxyXG4gICAgICAgIC5zZW5kKHVzZXJDcmVkZW50aWFscylcclxuICAgICAgICAuZW5kKGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xyXG4gICAgICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG8uZXF1YWwoMjAwKTtcclxuICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgIH0pO1xyXG59KTtcclxuLy90aGlzIHRlc3Qgc2F5czogbWFrZSBhIFBPU1QgdG8gdGhlIC9sb2dpbiByb3V0ZSB3aXRoIHRoZSBlbWFpbDogc3BvbmdlQGJvYi5jb20sIHBhc3N3b3JkOiBnYXJ5VGhlU25haWxcclxuLy9hZnRlciB0aGUgUE9TVCBoYXMgY29tcGxldGVkLCBtYWtlIHN1cmUgdGhlIHN0YXR1cyBjb2RlIGlzIDIwMFxyXG4vL2Fsc28gbWFrZSBzdXJlIHRoYXQgdGhlIHVzZXIgaGFzIGJlZW4gZGlyZWN0ZWQgdG8gdGhlIC9ob21lIHBhZ2VcclxuXHJcbmRlc2NyaWJlKCdHRVQgL3Byb2ZpbGUnLCBmdW5jdGlvbihkb25lKXtcclxuLy9hZGRyZXNzZXMgMXN0IGJ1bGxldCBwb2ludDogaWYgdGhlIHVzZXIgaXMgbG9nZ2VkIGluIHdlIHNob3VsZCBnZXQgYSAyMDAgc3RhdHVzIGNvZGVcclxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgMjAwIHJlc3BvbnNlIGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbicsIGZ1bmN0aW9uKGRvbmUpe1xyXG4gICAgICAgIGF1dGhlbnRpY2F0ZWRVc2VyLmdldCgnL3Byb2ZpbGUnKVxyXG4gICAgICAgICAgICAuZXhwZWN0KDIwMCwgZG9uZSk7XHJcbiAgICB9KTtcclxuLy9hZGRyZXNzZXMgMm5kIGJ1bGxldCBwb2ludDogaWYgdGhlIHVzZXIgaXMgbm90IGxvZ2dlZCBpbiB3ZSBzaG91bGQgZ2V0IGEgMzAyIHJlc3BvbnNlIGNvZGUgYW5kIGJlIGRpcmVjdGVkIHRvIHRoZSAvbG9naW4gcGFnZVxyXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSAzMDIgcmVzcG9uc2UgYW5kIHJlZGlyZWN0IHRvIC9sb2dpbicsIGZ1bmN0aW9uKGRvbmUpe1xyXG4gICAgICAgIHJlcXVlc3QoYXBwKS5nZXQoJy9wcm9maWxlJylcclxuICAgICAgICAgICAgLmV4cGVjdCgnTG9jYXRpb24nLCAnL2xvZ2luJylcclxuICAgICAgICAgICAgLmV4cGVjdCgzMDIsIGRvbmUpO1xyXG4gICAgfSk7XHJcbn0pOyovXHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "activitiesAfterLogin.js"
      ],
      "names": [],
      "mappings": "AAAA",
      "sourceRoot": "D:\\Webstorm\\poetryWeb\\test",
      "sourcesContent": [
        "/*\r\nvar expect = require('chai').expect;\r\nvar app = require('../app');\r\nvar request = require('supertest');\r\n\r\n//let's set up the data we need to pass to the login method\r\nconst userCredentials = {\r\n    email: 'sponge@bob.com',\r\n    password: 'garyTheSnail'\r\n}\r\n//now let's login the user before we run any tests\r\nvar authenticatedUser = request.agent(app);\r\nbefore(function(done){\r\n    authenticatedUser\r\n        .post('/users/login')\r\n        .send(userCredentials)\r\n        .end(function(err, response){\r\n            expect(response.statusCode).to.equal(200);\r\n            done();\r\n        });\r\n});\r\n//this test says: make a POST to the /login route with the email: sponge@bob.com, password: garyTheSnail\r\n//after the POST has completed, make sure the status code is 200\r\n//also make sure that the user has been directed to the /home page\r\n\r\ndescribe('GET /profile', function(done){\r\n//addresses 1st bullet point: if the user is logged in we should get a 200 status code\r\n    it('should return a 200 response if the user is logged in', function(done){\r\n        authenticatedUser.get('/profile')\r\n            .expect(200, done);\r\n    });\r\n//addresses 2nd bullet point: if the user is not logged in we should get a 302 response code and be directed to the /login page\r\n    it('should return a 302 response and redirect to /login', function(done){\r\n        request(app).get('/profile')\r\n            .expect('Location', '/login')\r\n            .expect(302, done);\r\n    });\r\n});*/\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1572879050124
  }
}